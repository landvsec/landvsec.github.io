<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DES攻略之原理篇</title>
    <url>/archives/681f5904.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>密码学课讲到了分组密码，故写文章总结一下要点，方便自己理解算法，参考了金晨辉等先生编著的《密码学》这本书，如有不当之处，还请在评论下方指出，我会及时进行检查修正，感谢！</p>
<p>接下来就是 DES 的回合了，多罗！</p>
<a id="more"></a>
<h1 id="DES-初识"><a href="#DES-初识" class="headerlink" title="DES 初识"></a>DES 初识</h1><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>首先来介绍其算法。</p>
<p>DES 属于<strong>迭代型分组密码</strong>，是块加密的对称密钥加密算法（即发送方和接收方都使用相同的密钥来进行加密解密）。</p>
<p>迭代型分组密码算法有几个基本参数：</p>
<ul>
<li>分组长度</li>
<li>密钥长度</li>
<li>圈数（或迭代次数）</li>
<li>圈（子）密钥长度</li>
</ul>
<p>对于 DES 算法，其基本参数：</p>
<ul>
<li>分组长度 64 bit</li>
<li>密钥长度 64 bit（因每个密钥字节的最后一个比特用于奇偶校验，即每个密钥字节中所有比特的模 2 和为 0 ，故有效密钥长度为 56 bit）</li>
<li>圈数（或迭代次数）为 16</li>
<li>圈（子）密钥长度为 48 bit</li>
</ul>
<p>DES 的加、脱密算法运用的是同一个算法，二者唯一的不同之处就是圈（子）密钥的使用次序相反。</p>
<p>DES 也称为<strong>块加密的对称密钥加密算法</strong>（即发送方和接收方都使用相同的密钥来进行加密解密）。使用 56 bit 有效密钥加密 64 bit 的明文数据，当 n 个 64 bit 明文数据块都经过 DES 加密处理后，所得到的 n 个 64 bit 密文数据块串在一起就是密文输出。</p>
<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p><img src="https://i.loli.net/2020/11/04/xd3oDsJZbX6z2TU.png" style="zoom:80%;" /></p>
<p>加密算法如图所示，我们需要学习的加密运算如下：</p>
<ul>
<li>初始置换 $IP$</li>
<li>迭代运算中的圈（轮）函数 $Q_k(x,y)$ </li>
<li>逆初始置换 $IP^{-1}$</li>
</ul>
<p>我们一一对其进行分析理解。</p>
<h3 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h3><p>初始置换 $IP$ 是对 64 比特的明文数据进行比特位置的移动。</p>
<p><img src="https://i.loli.net/2020/11/04/CuINgiUY7SLMEFB.png" style="zoom: 67%;" /></p>
<p>简而言之，就是按上面这张表进行变动，例如原来的第 58 比特经过变换后就变成了第 1 比特，第 50 比特经过变换后就变成了第 2 比特……，上面的数字代表的是原输入的比特位置，“代号入座”即可。</p>
<p>我们可以试着观察这张表，从列来看，最后一列 2、4、6、8、1、3、5、7 这八个位置的比特是不是同一字节的八比特？其他列也可以得出在同一字节中；从行来看，第一行的 58、50、42、34、26、18、10、2 这八个位置的比特是不是在八个字节中的同一位置（即第二个）？其他行同理。</p>
<p>综上，我们可以得出：</p>
<p>初始置换表的特点是，将输入的每个字节的第 i 个比特集中到输出的一个字节中。</p>
<h3 id="逆初始置换"><a href="#逆初始置换" class="headerlink" title="逆初始置换"></a>逆初始置换</h3><p>为了方便理解，最后的逆初始置换 $IP^{-1}$ 放到前面来讲。</p>
<p>逆初始置换，字面上理解就是与初始置换互逆，即对 16 圈迭代后的结果进行比特位置的移动，得到64 bit 密文，作用是为了保证脱密的正常进行。</p>
<p><img src="https://i.loli.net/2020/11/04/xdwGiUtafhvgbzk.png" style="zoom:67%;" /></p>
<p>同初始置换一样，就是简单的“对号入座”。当然，既然互逆，也能直接利用置换求逆的方式用 $IP$ 计算出来，同时也有下面的运算式：</p>
<script type="math/tex; mode=display">
IP^{-1}[IP(M)]=M</script><p>总结一下，这两个置换只是对输入数据的结构作调整，用以打乱数据的 ASCII 码字划分关系，其密码意义不大，对 DES 的安全性<strong>并不起本质作用</strong>。</p>
<p>另外说一点，这两张置换表是算法固定的，不需要进行计算，纯应试的朋友可以放心。</p>
<h3 id="迭代运算中的圈（轮）函数"><a href="#迭代运算中的圈（轮）函数" class="headerlink" title="迭代运算中的圈（轮）函数"></a>迭代运算中的圈（轮）函数</h3><p>接下来就到了核心——迭代运算。</p>
<p>以加密流程图的第 1 轮运算为例讲解：</p>
<p><img src="https://i.loli.net/2020/11/04/nQVcy12LBGfbewq.png" style="zoom:80%;" /></p>
<p>如上，第 1 轮中，被初始置换后的 64 bit 明文数据分为左半部分 $L_0$ 和右半部分 $R_0$ 各 32 bit ，右半部分 $R_0$ 在 48 比特圈（子）密钥 $k_1$ 的作用下进行 $f$ 变换，得到的 32 比特数据再与左半部分 $L_0$ 按位异或，产生的 32 bit 作为下一轮迭代的右半部分即 $R_1$ ，原右半部分直接作为下一轮迭代的左半部分 $L_1$ 。</p>
<p>但我们看加密流程的第 16 轮：</p>
<p><img src="https://i.loli.net/2020/11/04/RUyJs56Ggq8oaLD.png" style="zoom:80%;" /></p>
<p>很明显，并没有像第 1 轮那样，最后得出的运算结果要交叉给后面的数据，也就是说，<strong>最后一轮，我们不进行左右块对换。</strong></p>
<p>综上，圈函数的数学描述如下：</p>
<script type="math/tex; mode=display">
L_i=R_{i-1},R_i=L_{i-1}\bigoplus f(R_{i-1},k_i),i=1,2,...,16</script><p>口诀的话，记个“上右给下左，上左异F，十六钢管直”好了（？</p>
<blockquote>
<p>这里是更深层面上的理解，跟上面表达式差不多，但提到了 Feistel 函数、对合变换这几个概念，“不求甚解”的朋友可以略过。</p>
<p><strong>Feistel 函数</strong></p>
<p><img src="https://i.loli.net/2020/11/04/NS2IU9BujZrx8F5.png" style="zoom:80%;" /></p>
<p>这个函数也就是前 15 轮的函数模型，我们设 Feistel 函数为 $F_k(x,y)=(x \bigoplus f(y,k),y)$  ，这就是两者计算的最后结果，最后我们需要的只有 exchange ，即设 $D(x,y)=(y,x)$ 为左右块对换，而前 15 轮的轮函数$Q_k(x,y)$ 可表示为这两个函数的复合：</p>
<script type="math/tex; mode=display">
Q_k(x,y)=D(F_k(x,y))=D(x\bigoplus f(y,k),y)=(y,x\bigoplus f(y,k))</script><p>而第 16 轮不就是没有块对换的 $F_k(x,y)$ 吗？</p>
<p><strong>对合变换</strong></p>
<p>定义：设 $g:X\to X$，如果对任意 $x\in X$ ，均有 $g(g(x))=x$ ，则称 $g$ 为对合变换。</p>
<p>很容易得出，左右块对换 $D(x,y)$ 是对合变换。</p>
<p>而 $F_k(x,y)$ 呢？</p>
<script type="math/tex; mode=display">
F_k(F_k(x,y))=F_k(x\bigoplus f(y,k),y)=(x\bigoplus f(y,k)\bigoplus f(y,k),y)=(x,y)</script><p>自然也是对合变换，综上，轮函数 $Q_k(x,y)$ 也是对合变换，因为 $IP$ 与 $IP^{-1}$ 是互逆的，我们最终可以得出：</p>
<script type="math/tex; mode=display">
DES^{-1}(DES(M))=M</script><p>这样一条定理。</p>
</blockquote>
<p>说了这么多，$f$ 函数到底是什么呢？</p>
<h4 id="f-函数"><a href="#f-函数" class="headerlink" title="f 函数"></a>f 函数</h4><p>$f$ 函数是 DES 加、脱密算法的核心，也是用来<strong>实现混乱与扩散</strong>这两个分组密码设计原则的函数。由上面轮函数的表达式来看，$f$ 是有两个输入 y、k 的（即圈输入右半部分的 32 bit 数据 $R$ ，另一个是由初始密钥通过密钥生成算法产生的 48 bit 圈（子）密钥 k ）。</p>
<p><img src="https://i.loli.net/2020/11/04/63ucksj1gA5zE9X.png" style="zoom:80%;" /></p>
<p>图中的 E 表示扩展变换 E 盒，S 表示非线性代替 S盒，P 表示比特移位变换 P 盒。</p>
<p>$f$ 函数可表示为以下数学表达式：</p>
<script type="math/tex; mode=display">
f(R,k)=PS(E(R)\bigoplus k)</script><p>接下来我们来解释 E、S、P 这三种变换。</p>
<h5 id="扩展变换-E-盒-（-32-bit-gt-48-bit-）"><a href="#扩展变换-E-盒-（-32-bit-gt-48-bit-）" class="headerlink" title="扩展变换 E 盒 （ 32 bit -&gt; 48 bit ）"></a>扩展变换 E 盒 （ 32 bit -&gt; 48 bit ）</h5><p>作用是将 32 bit 数据扩展为 48 bit 数据。</p>
<p><img src="https://i.loli.net/2020/11/04/jUZxdvIlPBfw25t.png" style="zoom:80%;" /></p>
<p>简单来说就是将原始的 32 bit 分为 8 组，每组 4 bit ，这样每组都有左相邻和右相邻的比特，左相邻放左边，右相邻放右边，比较极端的例子如 $a_1$ 的左相邻是 $a_{32}$ ，$a_{32}$ 的右相邻自然是 $a_1$ 。</p>
<h5 id="非线性代替-S盒-（-48-bit-gt-32-bit-）"><a href="#非线性代替-S盒-（-48-bit-gt-32-bit-）" class="headerlink" title="非线性代替 S盒 （ 48 bit -&gt; 32 bit ）"></a>非线性代替 S盒 （ 48 bit -&gt; 32 bit ）</h5><p>作用是将 E 盒扩展后的 48 bit 数据与 48 bit 圈（子）密钥按位异或，然后将得到的 48 bit 数据从左到右也分为 8 组，每组 6 比特，作为 $S_1$，$S_2$，…，$S_8$ 的输入。</p>
<p>这里的运算是：</p>
<ul>
<li>行号：由每组 6 比特中的 $a_1a_6$ 对应的十进制数得出。</li>
<li>列号：由每组 6 比特中的 $a_2a_3a_4a_5$ 对用的十进制数得出。</li>
</ul>
<p>然后对照下表查找到的十进制数再转换为 4 位二进制数作为输出。</p>
<p><img src="https://i.loli.net/2020/11/04/jMAglhkJBcviNK8.png" style="zoom: 80%;" /></p>
<h5 id="比特移位变换-P-盒"><a href="#比特移位变换-P-盒" class="headerlink" title="比特移位变换 P 盒"></a>比特移位变换 P 盒</h5><p>P 盒是对 S 盒变换后的 32 bit 数据进行比特移位。</p>
<p><img src="https://i.loli.net/2020/11/04/LB3S1Iik4peRfOd.png" style="zoom:80%;" /></p>
<p>也就是和初始置换一样的“对号入座”。</p>
<p>加密算法讲到这里为止，理解了这些，下面的脱密算法很快能熟悉掌握。</p>
<h2 id="脱密算法"><a href="#脱密算法" class="headerlink" title="脱密算法"></a>脱密算法</h2><p>DES 的脱密算法和加密运算用的是同一个算法，二者的唯一不同是圈（子）密钥的使用次序相反，如加密过程中第 1-16 轮子密钥的使用次序是 $k_1$，$k_2$，…，$k_{16}$ ，那么脱密就是 $k_{16}$，…，$k_2$，$k_1$ 。</p>
<p>其他都是相同。</p>
<h2 id="密钥生成算法"><a href="#密钥生成算法" class="headerlink" title="密钥生成算法"></a>密钥生成算法</h2><p>前面说过，DES 的输入密钥长度是 64 bit（有效密钥长度 56 bit），但我们进行迭代运算时用到的子密钥长度只有 48 bit ，这里就有关于密钥生成算法。</p>
<p><img src="https://i.loli.net/2020/11/04/zZJmKlIF9vcuwLG.png" style="zoom: 67%;" /></p>
<p>如上图，子密钥生成有关运算如下：</p>
<ul>
<li>置换选择 1</li>
<li>循环移位</li>
<li>置换选择 2</li>
</ul>
<h3 id="置换选择-1-（-64-bit-gt-56-bit）"><a href="#置换选择-1-（-64-bit-gt-56-bit）" class="headerlink" title="置换选择 1 （ 64 bit -&gt; 56 bit）"></a>置换选择 1 （ 64 bit -&gt; 56 bit）</h3><p>首先，每个字节的第八比特会被舍弃。</p>
<p><img src="https://i.loli.net/2020/11/04/TsgrL1kDhM5IKS7.png" style="zoom:80%;" /></p>
<p>然后再按照下表“对号入座”，得到的就是有效密钥。</p>
<p><img src="https://i.loli.net/2020/11/04/7D4wzfMvK5xY6Wy.png" style="zoom: 50%;" /></p>
<h3 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h3><p>然后将有效密钥 56 bit 分为左半部分 $C_0$ 和右半部分 $D_0$ 各 28 bit ，就如置换选择 1 的置换表划分的那样，上面就是 $C_0$ ，下面就是 $D_0$ 。</p>
<p>由 $C_0$ 和 $D_0$ 出发，$k_i$ 产生的具体过程如下：</p>
<ul>
<li><p>首先分别对 $C_{i-1}$ 和 $D_{i-1}$ 进行循环左移得到 $C_i$ 和 $D_i$ ，循环左移的位数与其所在的圈数 i 如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/04/BMuzOgC28qXDSyf.png" style="zoom: 67%;" /></p>
</li>
<li><p>对 $C_i$ 和 $D_i$ 进行置换选择 2，仍是“对号入座”：</p>
<p><img src="https://i.loli.net/2020/11/04/yxUWLDaMzVjeEpS.png" style="zoom: 50%;" /></p>
</li>
</ul>
<p>由于 C 寄存器和 D 寄存器循环左移的位数都是 28 ，所以 $C_{16}=C_0$ ，$D_{16}=D_0$ ，在完成对一个明文分组加密后，就保证了 C 寄存器和 D 寄存器又回到了初始状态。</p>
<p>到这里，DES 的算法就介绍完毕了，希望对你有所帮助！</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>DES</tag>
      </tags>
  </entry>
</search>
